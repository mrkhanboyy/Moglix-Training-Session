https://gofile.io/d/0XJo27
    
    
    
    
    

https://gofile.io/d/UOvho2
    
    
    
    
    

Fail-Safe. 1. Exception. Any changes in the collection, such as adding, removing and updating collection during a thread are iterating collection then Fail fast throw concurrent modification exception. The fail-safe collection doesn't throw exception.




class Student implements Comparable<Student>{

	int rollNo;
	String name;
	int age;
	
	
	public Student(int rollNo, String name, int age) {
		super();
		this.rollNo = rollNo;
		this.name = name;
		this.age = age;
	}


	@Override
	public int compareTo(Student s1) {
		if(age==s1.age){
			return 0;
		}
		else if (age<s1.age) {
			return 1;
		}
		else
			return -1;
	}
	
}

public class CollectionExample {
	public static void main(String[] args) {
		Student s1=new Student(101,"Tanish",23);
		Student s2=new Student(102,"Anish",43);
		Student s3=new Student(103,"Manish",23);
		
		
		if(s1.compareTo(s2)==0) {
			System.out.println("Both are equal");
		}
		else if(s1.compareTo(s2)==-1) {
			System.out.println("s1 is less than s2");
		}
		
		
	}
	
}








import java.util.Iterator;
import java.util.LinkedList;
import java.util.Vector;

public class CollectionExample {
	public static void main(String[] args) {
		
		
		
		
		LinkedList<String> al=new LinkedList<String>();
		al.add("Anish");
		al.add("tanish");
		al.add("rupesh");
		al.add("Paresh");
		
		
		System.out.println(al);
		Iterator<String> itr=al.iterator();
		
		while(itr.hasNext()) {
			System.out.println(itr.next());
		}
		
		
		Vector<String> v=new Vector<String>();
		v.add("One");
		v.add("Two");
		v.add("Three");
		v.add("Four");
		
		Iterator<String> itr2=v.iterator();
		while(itr2.hasNext()) {
			System.out.println(itr2.next());
		}
		
		
		
	}
}






import java.util.Iterator;
import java.util.LinkedList;

public class CollectionExample {
	public static void main(String[] args) {
		LinkedList<String> al=new LinkedList<String>();
		al.add("Anish");
		al.add("tanish");
		al.add("rupesh");
		al.add("Paresh");
		
		
		System.out.println(al);
		Iterator<String> itr=al.iterator();
		
		while(itr.hasNext()) {
			System.out.println(itr.next());
		}
		
	}
}





What is Collection in Java
A Collection represents a single unit of objects, i.e., a group.
What is a framework in Java
It provides readymade architecture.
It represents a set of classes and interfaces.
It is optional.
What is Collection framework
The Collection framework represents a unified architecture for storing and manipulating a group of objects. It has:
Interfaces and its implementations, i.e., classes
Algorithm






The Collection in Java is a framework that provides an architecture to store and manipulate the group of objects.
Java Collections can achieve all the operations that you perform on a data such as searching, sorting, insertion, manipulation, and deletion.
Java Collection means a single unit of objects. Java Collection framework provides many interfaces (Set, List, Queue, Deque) and classes (ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet).






https://quizizz.com/join?gc=946459



public class EnumExample {
	public enum Day{
		SUNDAY,MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY
	}	

	Day day;

	public EnumExample(Day day) {
		this.day=day;
	}


	public void tellMeTheDay() {
		switch(day) {
		case MONDAY:
			System.out.println("Monday is bad");
			break;
		case FRIDAY:
			System.out.println("Friday is better");
			break;
		case SATURDAY:
			System.out.println("Weekend party");
			break;
		case SUNDAY:
			System.out.println("RELAX");
			break;
		default:
			System.out.println("Default case");
		}
	}

	public static void main(String[] args) {

		EnumExample e1=new EnumExample(Day.FRIDAY);
		e1.tellMeTheDay();

	}
}






public class EnumExample {
	public enum Level{
		HIGH(3) {
			@Override
			public String getLowerCase() {
				return HIGH.toString().toLowerCase();
			}
		},
		MEDIUM(2) {
			@Override
			public String getLowerCase() {
				return MEDIUM.toString().toLowerCase();
			}
		},
		LOW(1) {
			@Override
			public String getLowerCase() {
				return LOW.toString().toLowerCase();
			}
		};
		
		private final int levelCode;
		Level(int code){
			this.levelCode=code;
		}
		
		public int getLevelCode() {
			return levelCode;
		}
		
		public abstract String getLowerCase();
	}
	
	
	
	public static void main(String[] args) {
		Level level=Level.HIGH;
		System.out.println(level.getLevelCode());
		
		System.out.println(level.valueOf("HIGH"));
		
		
	}
}






enum Size{
  SMALL, MEDIUM, LARGE, EXTRALARGE;
  public String getSize() {
    // this will refer to the object SMALL
    switch(this) {
      case SMALL:
        return "small";
      case MEDIUM:
        return "medium";
      case LARGE:
        return "large";
      case EXTRALARGE:
        return "extra large";
      default:
        return null;
      }
   }

    
    
    
  public static void main(String[] args) {

    // call getSize()
    // using the object SMALL
    System.out.println("The size of the pizza is " + Size.SMALL.getSize());
  }
}








enum Size {
 SMALL, MEDIUM, LARGE, EXTRALARGE
}
class Test {
 Size pizzaSize;
 public Test(Size pizzaSize) {
   this.pizzaSize = pizzaSize;
 }
 public void orderPizza() {
   switch(pizzaSize) {
     case SMALL:
       System.out.println("I ordered a small size pizza.");
       break;
     case MEDIUM:
       System.out.println("I ordered a medium size pizza.");
       break;
     default:
       System.out.println("I don't know which one to order.");
       break;
   }
 }
}



class Main {
 public static void main(String[] args) {
   Test t1 = new Test(Size.MEDIUM);
   t1.orderPizza();
 }
}








Example 1: Java Enum
enum Size {
   SMALL, MEDIUM, LARGE, EXTRALARGE
}

class Main {
   public static void main(String[] args) {
      System.out.println(Size.SMALL);
      System.out.println(Size.MEDIUM);
   }
}




An enum type is a special data type that enables for a variable to be a set of predefined constants. The variable must be equal to one of the values that have been predefined for it. Common examples include compass directions (values of NORTH, SOUTH, EAST, and WEST) and the days of the week.

Because they are constants, the names of an enum type's fields are in uppercase letters.






import java.util.ArrayList;
import java.util.Comparator;
import java.util.DoubleSummaryStatistics;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

class Employee
{
	int id;

	String name;

	int age;

	String gender;

	String department;

	int yearOfJoining;

	double salary;

	public Employee(int id, String name, int age, String gender, String department, int yearOfJoining, double salary) 
	{
		this.id = id;
		this.name = name;
		this.age = age;
		this.gender = gender;
		this.department = department;
		this.yearOfJoining = yearOfJoining;
		this.salary = salary;
	}

	public int getId() 
	{
		return id;
	}

	public String getName() 
	{
		return name;
	}

	public int getAge() 
	{
		return age;
	}

	public String getGender() 
	{
		return gender;
	}

	public String getDepartment() 
	{
		return department;
	}

	public int getYearOfJoining() 
	{
		return yearOfJoining;
	}

	public double getSalary() 
	{
		return salary;
	}

	@Override
	public String toString() 
	{
		return "Id : "+id
				+", Name : "+name
				+", age : "+age
				+", Gender : "+gender
				+", Department : "+department
				+", Year Of Joining : "+yearOfJoining
				+", Salary : "+salary;
	}
}


public class StreamExample{
	public static void main(String[] args) {
		List<Employee> employeeList = new ArrayList<Employee>();

		employeeList.add(new Employee(111, "Jiya Brein", 32, "Female", "HR", 2011, 25000.0));
		employeeList.add(new Employee(122, "Paul Niksui", 25, "Male", "Sales And Marketing", 2015, 13500.0));
		employeeList.add(new Employee(133, "Martin Theron", 29, "Male", "Infrastructure", 2012, 18000.0));
		employeeList.add(new Employee(144, "Murali Gowda", 28, "Male", "Product Development", 2014, 32500.0));
		employeeList.add(new Employee(155, "Nima Roy", 27, "Female", "HR", 2013, 22700.0));
		employeeList.add(new Employee(166, "Iqbal Hussain", 43, "Male", "Security And Transport", 2016, 10500.0));
		employeeList.add(new Employee(177, "Manu Sharma", 35, "Male", "Account And Finance", 2010, 27000.0));
		employeeList.add(new Employee(188, "Wang Liu", 31, "Male", "Product Development", 2015, 34500.0));
		employeeList.add(new Employee(199, "Amelia Zoe", 24, "Female", "Sales And Marketing", 2016, 11500.0));
		employeeList.add(new Employee(200, "Jaden Dough", 38, "Male", "Security And Transport", 2015, 11000.5));
		employeeList.add(new Employee(211, "Jasna Kaur", 27, "Female", "Infrastructure", 2014, 15700.0));
		employeeList.add(new Employee(222, "Nitin Joshi", 25, "Male", "Product Development", 2016, 28200.0));
		employeeList.add(new Employee(233, "Jyothi Reddy", 27, "Female", "Account And Finance", 2013, 21300.0));
		employeeList.add(new Employee(244, "Nicolus Den", 24, "Male", "Sales And Marketing", 2017, 10700.5));
		employeeList.add(new Employee(255, "Ali Baig", 23, "Male", "Infrastructure", 2018, 12700.0));
		employeeList.add(new Employee(266, "Sanvi Pandey", 26, "Female", "Product Development", 2015, 28900.0));
		employeeList.add(new Employee(277, "Anuj Chettiar", 31, "Male", "Product Development", 2012, 35700.0));


		//1  How many male and female employees are there in the organization?
		Map<String, Long> noOfMaleAndFemaleEmployees=
				employeeList.stream().collect(Collectors.groupingBy(Employee::getGender, Collectors.counting()));

		System.out.println(noOfMaleAndFemaleEmployees);


		//2 Print the name of all departments in the organization?
		employeeList.stream()
		.map(Employee::getDepartment)
		.distinct()
		.forEach(System.out::println);

		//3What is the average age of male and female employees?

		Map<String, Double> avgAgeOfMaleAndFemaleEmployees=
				employeeList.stream().collect(Collectors.groupingBy(Employee::getGender, Collectors.averagingInt(Employee::getAge)));

		System.out.println(avgAgeOfMaleAndFemaleEmployees);


		//4Get the details of highest paid employee in the organization?
		Optional<Employee> highestPaidEmployeeWrapper=
				employeeList.stream().collect(Collectors.maxBy(Comparator.comparingDouble(Employee::getSalary)));

		Employee highestPaidEmployee = highestPaidEmployeeWrapper.get();

		System.out.println("Details Of Highest Paid Employee : ");

		System.out.println("==================================");

		System.out.println("ID : "+highestPaidEmployee.getId());

		System.out.println("Name : "+highestPaidEmployee.getName());

		System.out.println("Age : "+highestPaidEmployee.getAge());

		System.out.println("Gender : "+highestPaidEmployee.getGender());

		System.out.println("Department : "+highestPaidEmployee.getDepartment());

		System.out.println("Year Of Joining : "+highestPaidEmployee.getYearOfJoining());

		System.out.println("Salary : "+highestPaidEmployee.getSalary());


		//4   Get the names of all employees who have joined after 2015?


		employeeList.stream()
		.filter(e -> e.getYearOfJoining() > 2015)
		.map(Employee::getName)
		.forEach(System.out::println);


		//5 Count the number of employees in each department?

		Map<String, Long> employeeCountByDepartment=
				employeeList.stream().collect(Collectors.groupingBy(Employee::getDepartment, Collectors.counting()));

		Set<Entry<String, Long>> entrySet = employeeCountByDepartment.entrySet();

		for (Entry<String, Long> entry : entrySet)
		{
			System.out.println(entry.getKey()+" : "+entry.getValue());
		}

		//6 What is the average salary of each department?

		Map<String, Double> avgSalaryOfDepartments=
				employeeList.stream().collect(Collectors.groupingBy(Employee::getDepartment, Collectors.averagingDouble(Employee::getSalary)));

		Set<Entry<String, Double>> entrySet6 = avgSalaryOfDepartments.entrySet();

		for (Entry<String, Double> entry : entrySet6) 
		{
			System.out.println(entry.getKey()+" : "+entry.getValue());
		}


		//7 Get the details of youngest male employee in the product development department?

		Optional<Employee> youngestMaleEmployeeInProductDevelopmentWrapper=
				employeeList.stream()
				.filter(e -> e.getGender()=="Male" && e.getDepartment()=="Product Development")
				.min(Comparator.comparingInt(Employee::getAge));

		Employee youngestMaleEmployeeInProductDevelopment = youngestMaleEmployeeInProductDevelopmentWrapper.get();

		System.out.println("Details Of Youngest Male Employee In Product Development");

		System.out.println("----------------------------------------------");

		System.out.println("ID : "+youngestMaleEmployeeInProductDevelopment.getId());

		System.out.println("Name : "+youngestMaleEmployeeInProductDevelopment.getName());

		System.out.println("Age : "+youngestMaleEmployeeInProductDevelopment.getAge());

		System.out.println("Year Of Joinging : "+youngestMaleEmployeeInProductDevelopment.getYearOfJoining());

		System.out.println("Salary : "+youngestMaleEmployeeInProductDevelopment.getSalary());



		//8  Get the details of youngest male employee in the product development department?

		Optional<Employee> seniorMostEmployeeWrapper=
				employeeList.stream().sorted(Comparator.comparingInt(Employee::getYearOfJoining)).findFirst();

		Employee seniorMostEmployee = seniorMostEmployeeWrapper.get();

		System.out.println("Senior Most Employee Details :");

		System.out.println("----------------------------");

		System.out.println("ID : "+seniorMostEmployee.getId());

		System.out.println("Name : "+seniorMostEmployee.getName());

		System.out.println("Age : "+seniorMostEmployee.getAge());

		System.out.println("Gender : "+seniorMostEmployee.getGender());

		System.out.println("Age : "+seniorMostEmployee.getDepartment());

		System.out.println("Year Of Joinging : "+seniorMostEmployee.getYearOfJoining());

		System.out.println("Salary : "+seniorMostEmployee.getSalary());

		//9   How many male and female employees are there in the sales and marketing team?

		Map<String, Long> countMaleFemaleEmployeesInSalesMarketing=
				employeeList.stream()
				.filter(e -> e.getDepartment()=="Sales And Marketing")
				.collect(Collectors.groupingBy(Employee::getGender, Collectors.counting()));

		System.out.println(countMaleFemaleEmployeesInSalesMarketing);


		//What is the average salary of male and female employees?

		Map<String, Double> avgSalaryOfMaleAndFemaleEmployees=
				employeeList.stream().collect(Collectors.groupingBy(Employee::getGender, Collectors.averagingDouble(Employee::getSalary)));

		System.out.println(avgSalaryOfMaleAndFemaleEmployees);


		//11  List down the names of all employees in each department?
		Map<String, List<Employee>> employeeListByDepartment=
				employeeList.stream().collect(Collectors.groupingBy(Employee::getDepartment));

		Set<Entry<String, List<Employee>>> entrySet1 = employeeListByDepartment.entrySet();

		for (Entry<String, List<Employee>> entry : entrySet1) 
		{
			System.out.println("--------------------------------------");

			System.out.println("Employees In "+entry.getKey() + " : ");

			System.out.println("--------------------------------------");

			List<Employee> list = entry.getValue();

			for (Employee e : list) 
			{
				System.out.println(e.getName());
			}
		}


		/// What is the average salary and total salary of the whole organization?

		DoubleSummaryStatistics employeeSalaryStatistics=
				employeeList.stream().collect(Collectors.summarizingDouble(Employee::getSalary));

		System.out.println("Average Salary = "+employeeSalaryStatistics.getAverage());

		System.out.println("Total Salary = "+employeeSalaryStatistics.getSum());


		// Separate the employees who are younger or equal to 25 years from those employees who are older than 25 years.

		Map<Boolean, List<Employee>> partitionEmployeesByAge=
				employeeList.stream().collect(Collectors.partitioningBy(e -> e.getAge() > 25));

		Set<Entry<Boolean, List<Employee>>> entrySet3 = partitionEmployeesByAge.entrySet();

		for (Entry<Boolean, List<Employee>> entry : entrySet3) 
		{
			System.out.println("----------------------------");

			if (entry.getKey()) 
			{
				System.out.println("Employees older than 25 years :");
			}
			else
			{
				System.out.println("Employees younger than or equal to 25 years :");
			}

			System.out.println("----------------------------");

			List<Employee> list = entry.getValue();

			for (Employee e : list) 
			{
				System.out.println(e.getName());
			}
		}

		//Who is the oldest employee in the organization? What is his age and which department he belongs to?

		Optional<Employee> oldestEmployeeWrapper = employeeList.stream().max(Comparator.comparingInt(Employee::getAge));

		Employee oldestEmployee = oldestEmployeeWrapper.get();

		System.out.println("Name : "+oldestEmployee.getName());

		System.out.println("Age : "+oldestEmployee.getAge());

		System.out.println("Department : "+oldestEmployee.getDepartment());
	}
}











import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

class Employee{
	int empId;
	String name;
	double salary;
	String gender;
	int age;
	public Employee(int empId, String name, double salary,String gender,int age) {
		this.empId = empId;
		this.name = name;
		this.salary = salary;
		this.gender=gender;
		this.age=age;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", name=" + name + ", salary=" + salary + ", gender=" + gender + "+"+age+"]";
	}
	
	public double getSalary() {
		return salary;
	}
	
	public String getName() {
		return name;
	}
	
	public String getGender() {
		return gender;
	}
	
	public int getAge() {
		return age;
	}
	
}

public class StreamExample {
	private static Employee[] arrayOfEmps= {
		new Employee(101,"Tanish", 100000,"Male",34),
		new Employee(102, "Anish", 220000,"Male",45),
		new Employee(103, "Paresh", 40000,"Male",32),
		new Employee(104, "Minal", 50000,"FeMale",23),
		
	};
	
	private static List<Employee> empList=Arrays.asList(arrayOfEmps);
	
	public static void main(String[] args) {
		empList.stream();
		System.out.println(empList);
		
		empList.stream()
		.map(Employee::getName)
		.distinct()
		.forEach(System.out::println);
		
		
		
		Map<String,Double> avgAgeOfMaleAndFemale=empList.stream().collect(Collectors.groupingBy(Employee::getGender,Collectors.averagingInt(Employee::getAge)));
		
		System.out.println(avgAgeOfMaleAndFemale);
		
		
		Optional<Employee> highestPaidEmployee=empList.stream().collect(Collectors.maxBy((Comparator.comparingDouble(Employee::getSalary))));
		
		Employee e1=highestPaidEmployee.get();
		
		System.out.println(e1.getName());
		
		
		
		
	}
}





import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

class Employee{
	int empId;
	String name;
	double salary;
	String gender;
	int age;
	public Employee(int empId, String name, double salary,String gender,int age) {
		this.empId = empId;
		this.name = name;
		this.salary = salary;
        
        
		this.gender=gender;
		this.age=age;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", name=" + name + ", salary=" + salary + ", gender=" + gender + "+"+age+"]";
	}
	
	public String getName() {
		return name;
	}
	
	public String getGender() {
		return gender;
	}
	
	public int getAge() {
		return age;
	}
	
}

public class StreamExample {
	private static Employee[] arrayOfEmps= {
		new Employee(101,"Tanish", 100000,"Male",34),
		new Employee(102, "Anish", 220000,"Male",45),
		new Employee(103, "Paresh", 40000,"Male",32),
		new Employee(104, "Minal", 50000,"FeMale",23),
		
	};
	
	private static List<Employee> empList=Arrays.asList(arrayOfEmps);
	
	public static void main(String[] args) {
		empList.stream();
		System.out.println(empList);
		
		empList.stream()
		.map(Employee::getName)
		.distinct()
		.forEach(System.out::println);
		
		
		
		Map<String,Double> avgAgeOfMaleAndFemale=empList.stream().collect(Collectors.groupingBy(Employee::getGender,Collectors.averagingInt(Employee::getAge)));
		
		System.out.println(avgAgeOfMaleAndFemale);
		
	}
}







import java.util.Arrays;
import java.util.List;

class Employee{
	int empId;
	String name;
	double salary;
	public Employee(int empId, String name, double salary) {
		this.empId = empId;
		this.name = name;
		this.salary = salary;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", name=" + name + ", salary=" + salary + "]";
	}
	
}

public class StreamExample {
	private static Employee[] arrayOfEmps= {
		new Employee(101,"TAnish", 100000),
		new Employee(102, "Anish", 220000),
		new Employee(103, "Paresh", 40000),
	};
	
	private static List<Employee> empList=Arrays.asList(arrayOfEmps);
	
	public static void main(String[] args) {
		empList.stream();
		System.out.println(empList);
	}
}







import java.util.Arrays;
import java.util.Collection;
import java.util.stream.Stream;

public class LambdaExample {
	public static void main(String[] args) {
		Collection<String> collection=Arrays.asList("a","b","c","d");
		System.out.println(collection);
		
		Stream<String> streamCollection=collection.stream();
		
		System.out.println(streamCollection.findFirst());
		
 	}
	
}






import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

class Product{
	int id;
	String name;
	float price;
	
	public Product(int id,String name,float price) {
		this.id=id;
		this.name=name;
		this.price=price;
	}

}

public class LambdaExample {
	public static void main(String[] args) {
		List<Product> productList=new ArrayList<Product>();
		productList.add(new Product(1,"Laptop", 10000));
		productList.add(new Product(4,"Machine", 30000));
		productList.add(new Product(2,"Microphone",345));
		productList.add(new Product(3,"TV", 4999));
		
		List<Float> pList=productList.stream()
		.filter(p->p.price>5000)
		.map(pm->pm.price)
		.collect(Collectors.toList());
		
		System.out.println(pList);
	}
}







Example 4: Using lambda expression with parameters
@FunctionalInterface
interface MyInterface {
    // abstract method
    String reverse(String n);
}
public class Main {
    public static void main( String[] args ) {
        // declare a reference to MyInterface
        // assign a lambda expression to the reference
        MyInterface ref = (str) -> {
            String result = "";
            for (int i = str.length()-1; i >= 0 ; i--)
            result += str.charAt(i);
            return result;
        };
        // call the method of the interface
        System.out.println("Lambda reversed = " + ref.reverse("Lambda"));
    }
}








interface Sayable{
	int add(int a,int b);
}




public class LambdaExample {
	public static void main(String[] args) {
		
		Sayable a1=(a,b)-> (a+b);
		System.out.println(a1.add(100, 200));
		
		
		
		//Sayable s=()->{return "Hello";};
		
		//System.out.println(s.say());
	}
}


r



public class Java8Tester {
   public static void main(String args[]) {
      Java8Tester tester = new Java8Tester();

      //with type declaration
      MathOperation addition = (int a, int b) -> a + b;
		
      //with out type declaration
      MathOperation subtraction = (a, b) -> a - b;
		
      //with return statement along with curly braces
      MathOperation multiplication = (int a, int b) -> { return a * b; };
		
      //without return statement and without curly braces
      MathOperation division = (int a, int b) -> a / b;
		
      System.out.println("10 + 5 = " + tester.operate(10, 5, addition));
      System.out.println("10 - 5 = " + tester.operate(10, 5, subtraction));
      System.out.println("10 x 5 = " + tester.operate(10, 5, multiplication));
      System.out.println("10 / 5 = " + tester.operate(10, 5, division));
		
 //without parenthesis
      GreetingService greetService1 = message ->
      System.out.println("Hello " + message);
		
      //with parenthesis
      GreetingService greetService2 = (message) ->
      System.out.println("Hello " + message);
		
      greetService1.sayMessage("Mahesh");
      greetService2.sayMessage("Suresh");
   }
	
   interface MathOperation {
      int operation(int a, int b);
   }
	
   interface GreetingService {
      void sayMessage(String message);
   }
	
   private int operate(int a, int b, MathOperation mathOperation) {
      return mathOperation.operation(a, b);
   }
}



interface Drawable{
	public void draw();
}


public class LambdaExample {
	public static void main(String[] args) {
		int width=10;
		
		
		Drawable d3=()->{
			System.out.println("Drawing"+width);
		};
		
		d3.draw();
		
		
		
//		Drawable d=new Drawable() {
//			
//			@Override
//			public void draw() {
//				System.out.println("Drawing "+width);
//				
//			}
//		};
//		d.draw();
	}
}





interface Drawable{
	public void draw();
}


public class LambdaExample {
	public static void main(String[] args) {
		int width=10;
		
		Drawable d=new Drawable() {
			
			@Override
			public void draw() {
				System.out.println("Drawing "+width);
				
			}
		};
		d.draw();
	}
}






import java.lang.FunctionalInterface;
// this is functional interface
@FunctionalInterface
interface MyInterface{
   // abstract method
    double getPiValue();
}
public class Main {
    public static void main( String[] args ) {
    // declare a reference to MyInterface
    MyInterface ref;
    // lambda expression
    ref = () -> 3.1415;
    System.out.println("Value of Pi = " + ref.getPiValue());
    } 
}







import java.util.ArrayList;
import java.util.function.Consumer;

interface StringFunction{
	String run(String str);
}


public class LambdaExample {
	
	public static void printFormatted(String str,StringFunction format) {
		String result=format.run(str);
		System.out.println(result);
	}
	public static void main(String[] args) {
		
		
		StringFunction ex=(s) -> s+"!";
		
		StringFunction ask=(s) -> s+"?";
		
		printFormatted("Hello", ex);
		printFormatted("Hello", ask);
        
        
        


Consumer<Integer> method=(n)->{System.out.println(n);};
		
		numbers.forEach(method);
		
        
        
        


import java.util.ArrayList;

public class LambdaExample {
	public static void main(String[] args) {
		ArrayList<Integer> numbers=new ArrayList<Integer>();
		
		numbers.add(100);
		numbers.add(200);
		numbers.add(300);
		numbers.add(400);
		numbers.add(500);
		numbers.add(600);
		
		
		numbers.forEach((n) -> {System.out.println(n);});
		
		
//		for (int i = 0; i < numbers.size(); i++) {
//			System.out.println(numbers.get(i));
//		}
		

	}
}






Types of Lambda Body
In Java, the lambda body is of two types.

1. A body with a single expression

() -> System.out.println("Lambdas are great");
This type of lambda body is known as the expression body.

2. A body that consists of a block of code.

() -> {
    double pi = 3.1415;
    return pi;
};
This type of the lambda body is known as a block body. The block body allows the lambda body to include multiple statements. These statements are enclosed inside the braces and you have to add a semi-colon after the braces.






Lambda expressions are introduced in Java 8 and are touted to be the biggest feature of Java 8. Lambda expression facilitates functional programming, and simplifies the development a lot.
A lambda expression is characterized by the following syntax.

parameter -> expression body
Following are the important characteristics of a lambda expression.

Optional type declaration − No need to declare the type of a parameter. The compiler can inference the same from the value of the parameter.

Optional parenthesis around parameter − No need to declare a single parameter in parenthesis. For multiple parameters, parentheses are required.

Optional curly braces − No need to use curly braces in expression body if the body contains a single statement.

Optional return keyword − The compiler automatically returns the value if the body has a single expression to return the value. Curly braces are required to indicate that expression returns a value.





// Java Program to illustrate
// calling of predefined methods
// with static import
import static java.lang.Math.*;
class Test2 {
    public static void main(String[] args)
    {
        System.out.println(sqrt(4));
        System.out.println(pow(2, 2));
        System.out.println(abs(6.3));
    }
}






// Java Program to illustrate
// calling of predefined methods
// without static import
class Example {
    public static void main(String[] args)
    {
        System.out.println(Math.sqrt(4));
        System.out.println(Math.pow(2, 2));
        System.out.println(Math.abs(6.3));
    }
}




In Java, static import concept is introduced in 1.5 version. With the help of static import, we can access the static members of a class directly without class name or any object. For Example: we always use sqrt() method of Math class by using Math class i.e. Math.sqrt(), but by using static import we can access sqrt() method directly.According to SUN microSystem, it will improve the code readability and enhance coding. But according to the programming experts, it will lead to confusion and not good for programming. If there is no specific requirement then we should not go for static import.

