https://codebunk.com/b/9291100285880/



https://gofile.io/d/2tPhnS
    
    
    
    
    


Session - I

class Example2 
{
public static void main(String args[]) 
{
int num; 		//this declares a variable called num
num = 100; 	// this assigns num the value 100
System.out.println("This is num: " + num);
num = num * 2;
System.out.print("The value of num * 2 is ");
System.out.println(num);
}
}



class IfSample 
{
public static void main(String args[]) 
{
int x, y; 
x = 10;
y = 20;
if(x < y) System.out.println("x is less than y");
x = x * 2;
if(x == y) System.out.println("x now equal to y");
x = x * 2;
if(x > y) System.out.println("x now greater than y");
// this won't display anything
if(x == y) System.out.println("you won't see this");
}
}



class ForTest  
{
public static void main(String args[]) 
{
int x;
for(x = 0; x<10; x = x+1)
System.out.println("This is x: " + x);
}
}


class BlockTest 
{
public static void main(String args[]) 
{
int x, y;
y = 20;
// the target of this loop is a block
for(x = 0; x<10; x++) 
{
System.out.println("This is x: " + x);
System.out.println("This is y: " + y);
y = y - 2;
}
}
}








class Light 
{
public static void main(String args[]) 
{
int lightspeed;
long days;
long seconds;
long distance;
// approximate speed of light in miles per second
lightspeed = 186000;
days = 1000; 			// specify number of days here
seconds = days * 24 * 60 * 60; // convert to seconds
distance = lightspeed * seconds; // compute distance
System.out.print("In " + days);
System.out.print(" days light will travel about ");
System.out.println(distance + " miles.");
}
}





// char variables behave like integers.
class CharDemo2 
{
public static void main(String args[]) 
{
char ch1;
ch1 = 'X';
System.out.println("ch1 contains " + ch1);
ch1++; 	// increment ch1
System.out.println("ch1 is now " + ch1);
}
}


// Demonstrate boolean values.
class BoolTest 
{
public static void main(String args[]) 
{
boolean b;
b = false;
System.out.println("b is " + b);
b = true;
System.out.println("b is " + b);
// a boolean value can control the if statement
if(b) System.out.println("This is executed.");
b = false;
if(b) System.out.println("This is not executed.");
// outcome of a relational operator is a boolean value
System.out.println("10 > 9 is " + (10 > 9));
}
}


class Scope 
{
public static void main(String args[]) 
{
int x; 		// known to all code within main
x = 10;
if(x == 10) 
{ 
// start new scope
int y = 20; 		// known only to this block
// x and y both known here.
System.out.println("x and y: " + x + " " + y);
x = y * 2;
}
// y = 100; // Error! y not known here
// x is still known here.
System.out.println("x is " + x);
}
}



class LifeTime 
{
public static void main(String args[]) 
{
int x;
for(x = 0; x < 3; x++) 
{
int y = -1; // y is initialized each time block is entered
System.out.println("y is: " + y); // this always prints -1
y = 100;
System.out.println("y is now: " + y);
}
}
}






















// Demonstrate casts.
class Conversion 
{
public static void main(String args[]) 
{
byte b;
int i = 257;
double d = 323.142;
System.out.println("\nConversion of int to byte.");
b = (byte) i;
System.out.println("i and b " + i + " " + b);
System.out.println("\nConversion of double to int.");
i = (int) d;
System.out.println("d and i " + d + " " + i);
System.out.println("\nConversion of double to byte.");
b = (byte) d;
System.out.println("d and b " + d + " " + b);
}
}















// Demonstrate a one-dimensional array.
class Array 
{
public static void main(String args[]) 
{
int month_days[];
month_days = new int[12];
month_days[0] = 31;
month_days[1] = 28;
month_days[2] = 31;
month_days[3] = 30;
month_days[4] = 31;
month_days[5] = 30;
month_days[6] = 31;
month_days[7] = 31;
month_days[8] = 30;
month_days[9] = 31;
month_days[10] = 30;
month_days[11] = 31;
System.out.println("April has " + month_days[3] + " days.");
}
}
OR
// An improved version of the previous program.
class AutoArray 
{
public static void main(String args[]) 
{
int month_days[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31,
30, 31 };
System.out.println("April has " + month_days[3] + " days.");
}
}



	
// Demonstrate a two-dimensional array.
class TwoDArray 
{
public static void main(String args[]) 
{
int twoD[][]= new int[4][5];
int i, j, k = 0;
for(i=0; i<4; i++)
for(j=0; j<5; j++) 
{
twoD[i][j] = k;
k++;
}
for(i=0; i<4; i++) 
{
for(j=0; j<5; j++)
System.out.print(twoD[i][j] + " ");
System.out.println();
}
}
}



















// Manually allocate differing size second dimensions.
class TwoDAgain 
{
public static void main(String args[]) 
{
int twoD[][] = new int[4][];
twoD[0] = new int[1];
twoD[1] = new int[2];
twoD[2] = new int[3];
twoD[3] = new int[4];
int i, j, k = 0;
for(i=0; i<4; i++)
for(j=0; j<i+1; j++) 
{
twoD[i][j] = k;
k++;
}
for(i=0; i<4; i++) 
{
for(j=0; j<i+1; j++)
System.out.print(twoD[i][j] + " ");
System.out.println();
}
}
}















// Initialize a two-dimensional array.
class Matrix 
{
public static void main(String args[]) 
{
double m[][] = {
{ 0*0, 1*0, 2*0, 3*0 },
{ 0*1, 1*1, 2*1, 3*1 },
{ 0*2, 1*2, 2*2, 3*2 },
{ 0*3, 1*3, 2*3, 3*3 }
};
int i, j;
for(i=0; i<4; i++) 
{
for(j=0; j<4; j++)
System.out.print(m[i][j] + " ");
System.out.println();
}
}
}




















// Demonstrate a three-dimensional array.
class threeDMatrix 
{
public static void main(String args[]) 
{
int threeD[][][] = new int[3][4][5];
int i, j, k;
for(i=0; i<3; i++)
for(j=0; j<4; j++)
for(k=0; k<5; k++)
threeD[i][j][k] = i * j * k;
for(i=0; i<3; i++) 
{
for(j=0; j<4; j++) 
{
for(k=0; k<5; k++)
System.out.print(threeD[i][j][k] + " ");
System.out.println();
}
System.out.println();
}
}
}

















	
// Demonstrate the basic arithmetic operators.
class BasicMath 
{
public static void main(String args[]) 
{
// arithmetic using integers
System.out.println("Integer Arithmetic");
int a = 1 + 1;
int b = a * 3;
int c = b / 4;
int d = c - a;
int e = -d;
System.out.println("a = " + a);
System.out.println("b = " + b);
System.out.println("c = " + c);
System.out.println("d = " + d);
System.out.println("e = " + e);
// arithmetic using doubles
System.out.println("\nFloating Point Arithmetic");
double da = 1 + 1;
double db = da * 3;
double dc = db / 4;
double dd = dc - a;
double de = -dd;
System.out.println("da = " + da);
System.out.println("db = " + db);
System.out.println("dc = " + dc);
System.out.println("dd = " + dd);
System.out.println("de = " + de);
}
}










// Demonstrate the % operator.
class Modulus 
{
public static void main(String args[]) 
{
int x = 42;
double y = 42.25;
System.out.println("x mod 10 = " + x % 10);
System.out.println("y mod 10 = " + y % 10);
}
}




// Demonstrate several assignment operators.
class OpEquals 
{
public static void main(String args[]) 
{
int a = 1;
int b = 2;
int c = 3;
a += 5;
b *= 4;
c += a * b;
c %= 6;
System.out.println("a = " + a);
System.out.println("b = " + b);
System.out.println("c = " + c);
}
}





Control statements

If..Else Statements

class IfElse 
{
public static void main(String args[]) 
{
int month = 4; 		// April
String season;
if(month == 12 || month == 1 || month == 2)
season = "Winter";
else if(month == 3 || month == 4 || month == 5)
season = "Spring";
else if(month == 6 || month == 7 || month == 8)
season = "Summer";
else if(month == 9 || month == 10 || month == 11)
season = "Autumn";
else
season = "Bogus Month";
System.out.println("April is in the " + season + ".");
}
}















class SampleSwitch 
{
public static void main(String args[]) 
{
for(int i=0; i<6; i++)
switch(i) 
{
case 0:
System.out.println("i is zero.");
break;
case 1:
System.out.println("i is one.");
break;
case 2:
System.out.println("i is two.");
break;
case 3:
System.out.println("i is three.");
break;
default:
System.out.println("i is greater than 3.");
}
}
}














class MissingBreak 
{
public static void main(String args[]) 
{
for(int i=0; i<12; i++)
switch(i) 
{
case 0:
case 1:
case 2:
case 3:
case 4:
System.out.println("i is less than 5");
break;
case 5:
case 6:
case 7:
case 8:
case 9:
System.out.println("i is less than 10");
break;
default:
System.out.println("i is 10 or more");
}
}
}











class Comma 
{
public static void main(String args[]) 
{
int a, b;
for(a=1, b=4; a<b; a++, b--) 
{
System.out.println("a = " + a);
System.out.println("b = " + b);
}
}
}






class Nested 
{
public static void main(String args[]) 
{
int i, j;
for(i=0; i<10; i++) 
{
for(j=i; j<10; j++)
System.out.print(".");
System.out.println();
}
}
}




class BreakLoop 
{
public static void main(String args[]) 
{
for(int i=0; i<100; i++) 
{
if(i == 10) break; 		// terminate loop if i is 10
System.out.println("i: " + i);
}
System.out.println("Loop complete.");
}
}







// Using break with nested loops.
class BreakLoop3 
{
public static void main(String args[]) 
{
for(int i=0; i<3; i++) 
{
System.out.print("Pass " + i + ": ");
for(int j=0; j<100; j++) 
{
if(j == 10) break; // terminate loop if j is 10
System.out.print(j + " ");
}
System.out.println();
}
System.out.println("Loops complete.");
}
}

// Using break as a civilized form of goto.
class Break 
{
public static void main(String args[]) 
{
boolean t = true;
first: 
{
second: 
{
third: 
{
System.out.println("Before the break.");
if(t) break second; // break out of second block
System.out.println("This won't execute");
}
System.out.println("This won't execute");
}
System.out.println("This is after second block.");
}
}
}



class Continue 
{
public static void main(String args[]) 
{
for(int i=0; i<10; i++) 
{
System.out.print(i + " ");
if (i%2 == 0) continue;
System.out.println("");
}
}
}



/* A program that uses the Box class.
Call this file BoxDemo.java
*/
class Box 
{
double width;
double height;
double depth;
}
// This class declares an object of type Box.
class BoxDemo 
{
public static void main(String args[]) 
{
Box mybox = new Box();
double vol;
// assign values to mybox's instance variables
mybox.width = 10;
mybox.height = 20;
mybox.depth = 15;
// compute volume of box
vol = mybox.width * mybox.height * mybox.depth;
System.out.println("Volume is " + vol);
}
}











// This program includes a method inside the box class.
class Box 
{
double width;
double height;
double depth;
// display volume of a box
void volume() 
{
System.out.print("Volume is ");
System.out.println(width * height * depth);
}
}
class BoxDemo3 
{
public static void main(String args[]) 
{
Box mybox1 = new Box();
Box mybox2 = new Box();
// assign values to mybox1's instance variables
mybox1.width = 10;
mybox1.height = 20;
mybox1.depth = 15;
/* assign different values to mybox2's
instance variables */
mybox2.width = 3;
mybox2.height = 6;
mybox2.depth = 9;
// display volume of first box
mybox1.volume();
// display volume of second box
mybox2.volume();
}
}





// Now, volume() returns the volume of a box.
class Box 
{
double width;
double height;
double depth;
// compute and return volume
double volume() 
{
return width * height * depth;
}
}
class BoxDemo4 
{
public static void main(String args[]) 
{
Box mybox1 = new Box();
Box mybox2 = new Box();
double vol;
// assign values to mybox1's instance variables
mybox1.width = 10;
mybox1.height = 20;
mybox1.depth = 15;
/* assign different values to mybox2's
instance variables */
mybox2.width = 3;
mybox2.height = 6;
mybox2.depth = 9;
// get volume of first box
vol = mybox1.volume();
System.out.println("Volume is " + vol);
// get volume of second box
vol = mybox2.volume();
System.out.println("Volume is " + vol);
}
}



// This program uses a parameterized method.
class Box 
{
double width;
double height;
double depth;
// compute and return volume
double volume() 
{
return width * height * depth;
}
// sets dimensions of box
void setDim(double w, double h, double d) 
{
width = w;
height = h;
depth = d;
}
}
class BoxDemo5 
{
public static void main(String args[]) 
{
Box mybox1 = new Box();
Box mybox2 = new Box();
double vol;
// initialize each box
mybox1.setDim(10, 20, 15);
mybox2.setDim(3, 6, 9);
// get volume of first box
vol = mybox1.volume();
System.out.println("Volume is " + vol);
// get volume of second box
vol = mybox2.volume();
System.out.println("Volume is " + vol);
}
}

/* Here, Box uses a constructor to initialize the
dimensions of a box.
*/
class Box 
{
double width;
double height;
double depth;
// This is the constructor for Box.
Box() 
{
System.out.println("Constructing Box");
width = 10;
height = 10;
depth = 10;
}
// compute and return volume
double volume() 
{
return width * height * depth;
}
}
class BoxDemo6 
{
public static void main(String args[]) 
{
// declare, allocate, and initialize Box objects
Box mybox1 = new Box();
Box mybox2 = new Box();
double vol;
// get volume of first box
vol = mybox1.volume();
System.out.println("Volume is " + vol);
// get volume of second box
vol = mybox2.volume();
System.out.println("Volume is " + vol);
}
}



/* Here, Box uses a parameterized constructor to
initialize the dimensions of a box.
*/
class Box 
{
double width;
double height;
double depth;
// This is the constructor for Box.
Box(double w, double h, double d) 
{
width = w;
height = h;
depth = d;
}
// compute and return volume
double volume() 
{
return width * height * depth;
}
}
class BoxDemo7 
{
public static void main(String args[]) 
{
// declare, allocate, and initialize Box objects
Box mybox1 = new Box(10, 20, 15);
Box mybox2 = new Box(3, 6, 9);
double vol;
// get volume of first box
vol = mybox1.volume();
System.out.println("Volume is " + vol);
// get volume of second box
vol = mybox2.volume();
System.out.println("Volume is " + vol);
}
}

// Demonstrate method overloading.
class OverloadDemo 
{
void test() 
{
System.out.println("No parameters");
}
// Overload test for one integer parameter.
void test(int a) 
{
System.out.println("a: " + a);
}
// Overload test for two integer parameters.
void test(int a, int b) 
{
System.out.println("a and b: " + a + " " + b);
}
// overload test for a double parameter
double test(double a) 
{
System.out.println("double a: " + a);
return a*a;
}
}
class Overload 
{
public static void main(String args[]) 
{
OverloadDemo ob = new OverloadDemo();
double result;
// call all versions of test()
ob.test();
ob.test(10);
ob.test(10, 20);
result = ob.test(123.25);
System.out.println("Result of ob.test(123.25): " + result);
}
}

/* Here, Box defines three constructors to initialize
the dimensions of a box various ways.
*/
class Box 
{
double width;
double height;
double depth;
// constructor used when all dimensions specified
Box(double w, double h, double d) 
{
width = w;
height = h;
depth = d;
}
// constructor used when no dimensions specified
Box() 
{
width = -1; 			// use -1 to indicate
height = -1; 		// an uninitialized
depth = -1; 			// box
}
// constructor used when cube is created
Box(double len) 
{
width = height = depth = len;
}
// compute and return volume
double volume() 
{
return width * height * depth;
}
}
class OverloadCons 
{
public static void main(String args[]) 
{
// create boxes using the various constructors
Box mybox1 = new Box(10, 20, 15);
Box mybox2 = new Box();
Box mycube = new Box(7);
double vol;
// get volume of first box
vol = mybox1.volume();
System.out.println("Volume of mybox1 is " + vol);
// get volume of second box
vol = mybox2.volume();
System.out.println("Volume of mybox2 is " + vol);
// get volume of cube
vol = mycube.volume();
System.out.println("Volume of mycube is " + vol);
}
}


























// Here, Box allows one object to initialize another.
class Box 
{
double width;
double height;
double depth;
// construct clone of an object
Box(Box ob) 			// pass object to constructor
{
width = ob.width;
height = ob.height;
depth = ob.depth;
}
// constructor used when all dimensions specified
Box(double w, double h, double d) 
{
width = w;
height = h;
depth = d;
}
// constructor used when no dimensions specified
Box() 
{
width = -1; 			// use -1 to indicate
height = -1; 		// an uninitialized
depth = -1; 			// box
}
// constructor used when cube is created
Box(double len) 
{
width = height = depth = len;
}
// compute and return volume
double volume() 
{
return width * height * depth;
}
}
class OverloadCons2 
{
public static void main(String args[]) 
{
// create boxes using the various constructors
Box mybox1 = new Box(10, 20, 15);
Box mybox2 = new Box();
Box mycube = new Box(7);
Box myclone = new Box(mybox1);
double vol;
// get volume of first box
vol = mybox1.volume();
System.out.println("Volume of mybox1 is " + vol);
// get volume of second box
vol = mybox2.volume();
System.out.println("Volume of mybox2 is " + vol);
// get volume of cube
vol = mycube.volume();
System.out.println("Volume of cube is " + vol);
// get volume of clone
vol = myclone.volume();
System.out.println("Volume of clone is " + vol);
}
}













/* This program demonstrates the difference between
public and private.
*/

class Test 
{
int a; 					// default access
public int b; 			// public access
private int c; 			// private access
// methods to access c
void setc(int i) 			// set c's value
	{
c = i;
}
int getc() 				// get c's value
{ 
return c;
}
}
class AccessTest 
{
public static void main(String args[]) 
{
Test ob = new Test();
// These are OK, a and b may be accessed directly
ob.a = 10;
ob.b = 20;
// This is not OK and will cause an error
// ob.c = 100; 		// Error!
// You must access c through its methods
ob.setc(100); 		// OK
System.out.println("a, b, and c: " + ob.a + " " +
ob.b + " " + ob.getc());
}
}




// Demonstrate static variables, methods, and blocks.
class UseStatic 
{
static int a = 3;
static int b;
static void meth(int x) 
{
System.out.println("x = " + x);
System.out.println("a = " + a);
System.out.println("b = " + b);
}
static 
{
System.out.println("Static block initialized.");
b = a * 4;
}
public static void main(String args[]) 
{
meth(42);
}
}

class StaticDemo 
{
static int a = 42;
static int b = 99;
static void callme() 
{
System.out.println("a = " + a);
}
}
class StaticByName 
{
public static void main(String args[]) 
{
StaticDemo.callme();
System.out.println("b = " + StaticDemo.b);
}
}
Session –II

// Demonstrate an inner class.
class Outer 
{
int outer_x = 100;
void test() 
{
Inner inner = new Inner();
inner.display();
}
// this is an inner class
class Inner 
{
void display() 
{
System.out.println("display: outer_x = " + outer_x);
}
}
}
class InnerClassDemo 
{
public static void main(String args[]) 
{
Outer outer = new Outer();
outer.test();
}
}











// This program will not compile.
class Outer 
{
int outer_x = 100;
void test() 
{
Inner inner = new Inner();
inner.display();
}
// this is an inner class
class Inner 
{
int y = 10; // y is local to Inner
void display() 
{
System.out.println("display: outer_x = " + outer_x);
}
}
void showy() 
{
System.out.println(y); // error, y not known here!
}
}
class InnerClassDemo 
{
public static void main(String args[]) 
{
Outer outer = new Outer();
outer.test();
}
}









// Define an inner class within a for loop.
class Outer 
{
int outer_x = 100;
void test() 
{
for(int i=0; i<10; i++) 
{
class Inner 
{
void display() 
{
System.out.println("display: outer_x = " + outer_x);
}
}
Inner inner = new Inner();
inner.display();
}
}
}
class InnerClassDemo 
{
public static void main(String args[]) 
{
Outer outer = new Outer();
outer.test();
}
}










Using Command-Line Arguments


// Display all command-line arguments.
class CommandLine 
{
public static void main(String args[]) 
{
for(int i=0; i<args.length; i++)
System.out.println("args[" + i + "]: " +
args[i]);
}
}



























// A simple example of inheritance.
// Create a superclass.
class A 
{
int i, j;
void showij() 
{
System.out.println("i and j: " + i + " " + j);
}
}

// Create a subclass by extending class A.
class B extends A 
{
int k;
void showk() 
{
System.out.println("k: " + k);
}
void sum() 
{
System.out.println("i+j+k: " + (i+j+k));
}
}
class SimpleInheritance 
{
public static void main(String args[]) 
{
A superOb = new A();
B subOb = new B();
// The superclass may be used by itself.
superOb.i = 10;
superOb.j = 20;
System.out.println("Contents of superOb: ");
superOb.showij();
System.out.println();
/* The subclass has access to all public members of
its superclass. */
subOb.i = 7;
subOb.j = 8;
subOb.k = 9;
System.out.println("Contents of subOb: ");
subOb.showij();
subOb.showk();
System.out.println();
System.out.println("Sum of i, j and k in subOb:");
subOb.sum();
}
}































// This program uses inheritance to extend Box.
class Box 
{
double width;
double height;
double depth;
// construct clone of an object
Box(Box ob) 
{ 		// pass object to constructor
width = ob.width;
height = ob.height;
depth = ob.depth;
}
// constructor used when all dimensions specified
Box(double w, double h, double d) 
{
width = w;
height = h;
depth = d;
}
// constructor used when no dimensions specified
Box() 
{
width = -1; 			// use -1 to indicate
height = -1; 		// an uninitialized
depth = -1; 			// box
}
// constructor used when cube is created
Box(double len) 
{
width = height = depth = len;
}
// compute and return volume
double volume() 
{	
return width * height * depth;
}
}
// Here, Box is extended to include weight.
class BoxWeight extends Box 
{
double weight; 			// weight of box
// constructor for BoxWeight
BoxWeight(double w, double h, double d, double m) 
{
width = w;
height = h;
depth = d;
weight = m;
}
}
class DemoBoxWeight 
{
public static void main(String args[]) 
{
BoxWeight mybox1 = new BoxWeight(10, 20, 15, 34.3);
BoxWeight mybox2 = new BoxWeight(2, 3, 4, 0.076);
double vol;
vol = mybox1.volume();
System.out.println("Volume of mybox1 is " + vol);
System.out.println("Weight of mybox1 is " + mybox1.weight);
System.out.println();
vol = mybox2.volume();
System.out.println("Volume of mybox2 is " + vol);
System.out.println("Weight of mybox2 is " + mybox2.weight);
}
}













// A complete implementation of BoxWeight.
class Box 
{
private double width;
private double height;
private double depth;
// construct clone of an object
Box(Box ob) 
{ 				// pass object to constructor
width = ob.width;
height = ob.height;
depth = ob.depth;
}
// constructor used when all dimensions specified
Box(double w, double h, double d) 
{
width = w;
height = h;
depth = d;
}
// constructor used when no dimensions specified
Box() 
{
width = -1; 				// use -1 to indicate
height = -1; 			// an uninitialized
depth = -1; 				// box
}
// constructor used when cube is created
Box(double len) 
{
width = height = depth = len;
}
// compute and return volume
double volume() 
{
return width * height * depth;
}
}
// Box	Weight now fully implements all constructors.
class BoxWeight extends Box 
{
double weight; 				// weight of box
// construct clone of an object
BoxWeight(BoxWeight ob) 
{ 						// pass object to constructor
super(ob);
weight = ob.weight;
}
// constructor when all parameters are specified
BoxWeight(double w, double h, double d, double m) 
{
super(w, h, d); // call superclass constructor
weight = m;
}
// default constructor
BoxWeight() 
{
super();
weight = -1;
}
// constructor used when cube is created
BoxWeight(double len, double m) 
{
super(len);
weight = m;
}
}
class DemoSuper 
{
public static void main(String args[]) 
{
BoxWeight mybox1 = new BoxWeight(10, 20, 15, 34.3);
BoxWeight mybox2 = new BoxWeight(2, 3, 4, 0.076);
BoxWeight mybox3 = new BoxWeight(); // default
BoxWeight mycube = new BoxWeight(3, 2);
BoxWeight myclone = new BoxWeight(mybox1);
double vol;
vol = mybox1.volume();
System.out.println("Volume of mybox1 is " + vol);
System.out.println("Weight of mybox1 is " + mybox1.weight);
System.out.println();
vol = mybox2.volume();
System.out.println("Volume of mybox2 is " + vol);
System.out.println("Weight of mybox2 is " + mybox2.weight);
System.out.println();
vol = mybox3.volume();
System.out.println("Volume of mybox3 is " + vol);
System.out.println("Weight of mybox3 is " + mybox3.weight);
System.out.println();
vol = myclone.volume();
System.out.println("Volume of myclone is " + vol);
System.out.println("Weight of myclone is " + myclone.weight);
System.out.println();
vol = mycube.volume();
System.out.println("Volume of mycube is " + vol);
System.out.println("Weight of mycube is " + mycube.weight);
System.out.println();
}
}





















// Using super to overcome name hiding.
class A 
{
int i;
}
// Create a subclass by extending class A.
class B extends A 
{
int i; 		// this i hides the i in A
B(int a, int b) 
{
super.i = a; // i in A
i = b; // i in B
}
void show() 
{
System.out.println("i in superclass: " + super.i);
System.out.println("i in subclass: " + i);
}
}
class UseSuper 
{
public static void main(String args[]) 
{
B subOb = new B(1, 2);
subOb.show();
}
}












// Demonstrate when constructors are called.
// Create a super class.
class A 
{
A() 
{
System.out.println("Inside A's constructor.");
}
}
// Create a subclass by extending class A.
class B extends A 
{
B() 
{
System.out.println("Inside B's constructor.");
}
}
// Create another subclass by extending B.
class C extends B 
{
C() 
{
System.out.println("Inside C's constructor.");
}
}
class CallingCons 
{
public static void main(String args[]) 
{
C c = new C();
}
}








// Method overriding.
class A 
{
int i, j;
A(int a, int b) 
{
i = a;
j = b;
}
// display i and j
void show() 
{
System.out.println("i and j: " + i + " " + j);
}
}
class B extends A 
{
int k;
B(int a, int b, int c) 
{
super(a, b);
k = c;
}
// display k – this overrides show() in A
void show() 
{
System.out.println("k: " + k);
}
}

class Override 
{
public static void main(String args[]) 
{
B subOb = new B(1, 2, 3);
subOb.show(); 		// this calls show() in B
}
}

	
// Methods with differing type signatures are overloaded – not
// overridden.
class A 
{
int i, j;
A(int a, int b) 
{
i = a;
j = b;
}
// display i and j
void show() 
{
System.out.println("i and j: " + i + " " + j);
}
}
// Create a subclass by extending class A.
class B extends A 
{
int k;
B(int a, int b, int c) 
{
super(a, b);
k = c;
}
// overload show()
void show(String msg) 
{
System.out.println(msg + k);
}
}
class Override2 
{
public static void main(String args[]) 
{
B subOb = new B(1, 2, 3);
subOb.show("This is k: "); 		// this calls show() in B
subOb.show(); 				// this calls show() in A
}
}
// Dynamic Method Dispatch
class A 
{
void callme() 
{
System.out.println("Inside A's callme method");
}
}
class B extends A 
{
// override callme()
void callme() 
{
System.out.println("Inside B's callme method");
}
}
class C extends A 
{
// override callme()
void callme() 
{
System.out.println("Inside C's callme method");
}
}
class Dispatch 
{
public static void main(String args[]) 
{
A a = new A(); 		// object of type A
B b = new B(); 		// object of type B
C c = new C(); 		// object of type C
A r; 				// obtain a reference of type A
r = a; 			// r refers to an A object
r.callme(); 			// calls A's version of callme
r = b; 			// r refers to a B object
r.callme(); 			// calls B's version of callme
r = c; 				// r refers to a C object
r.callme(); 			// calls C's version of callme
}
}
// Using run-time polymorphism.
class Figure 
{
double dim1;
double dim2;
Figure(double a, double b) 
{
dim1 = a;
dim2 = b;
}
double area() 
{
System.out.println("Area for Figure is undefined.");
return 0;
}
}
class Rectangle extends Figure 
{
Rectangle(double a, double b) 
{
super(a, b);
}
// override area for rectangle
double area() 
{
System.out.println("Inside Area for Rectangle.");
return dim1 * dim2;
}
}
class Triangle extends Figure 
{
Triangle(double a, double b) 
{
super(a, b);
}
// override area for right triangle
double area() 
{
System.out.println("Inside Area for Triangle.");
return dim1 * dim2 / 2;
}
}
class FindAreas 
{
public static void main(String args[]) 
{
Figure f = new Figure(10, 10);
Rectangle r = new Rectangle(9, 5);
Triangle t = new Triangle(10, 8);
Figure figref;
figref = r;
System.out.println("Area is " + figref.area());
figref = t;
System.out.println("Area is " + figref.area());
figref = f;
System.out.println("Area is " + figref.area());
}
}






















// Using abstract methods and classes.
abstract class Figure 
{
double dim1;
double dim2;
Figure(double a, double b) 
{
dim1 = a;
dim2 = b;
}
// area is now an abstract method
abstract double area();
}
class Rectangle extends Figure 
{
Rectangle(double a, double b) 
{
super(a, b);
}
// override area for rectangle
double area() 
{
System.out.println("Inside Area for Rectangle.");
return dim1 * dim2;
}
}
class Triangle extends Figure 
{
Triangle(double a, double b) 
{
super(a, b);
}
// override area for right triangle
double area() 
{
System.out.println("Inside Area for Triangle.");
return dim1 * dim2 / 2;
}
}
class AbstractAreas 
{
public static void main(String args[]) 
{
// Figure f = new Figure(10, 10); // illegal now
Rectangle r = new Rectangle(9, 5);
Triangle t = new Triangle(10, 8);
Figure figref; 		// this is OK, no object is created
figref = r;
System.out.println("Area is " + figref.area());
figref = t;
System.out.println("Area is " + figref.area());
}
}



























Packages

// A simple package
package MyPack;
class Balance 
{
String name;
double bal;
Balance(String n, double b) 
{
name = n;
bal = b;
}
void show() 
{
if(bal<0)
System.out.print("--> ");
System.out.println(name + ": $" + bal);
}
}
class AccountBalance 
{
public static void main(String args[]) 
{
Balance current[] = new Balance[3];
current[0] = new Balance("K. J. Fielding", 123.23);
current[1] = new Balance("Will Tell", 157.02);
current[2] = new Balance("Tom Jackson", -12.33);
for(int i=0; i<3; i++) current[i].show();
}
}









Exceptional Handling

class Exc1 
{
static void subroutine() 
{
int d = 0;
int a = 10 / d;
}
public static void main(String args[]) 
{
Exc1.subroutine();
}
}






//Using try and catch
class Exc2 
{
public static void main(String args[]) 
{
int d, a;
try 
{ 				// monitor a block of code.
d = 0;
a = 42 / d;
System.out.println("This will not be printed.");
} 
catch (ArithmeticException e) 
{ 				// catch divide-by-zero error
System.out.println("Division by zero.");
}
System.out.println("After catch statement.");
}
}

// Demonstrate multiple catch statements.
class MultiCatch 
{
public static void main(String args[]) 
{
try 
{
int a = args.length;
System.out.println("a = " + a);
int b = 42 / a;
int c[] = { 1 };
c[42] = 99;
} 
catch(ArithmeticException e) 
{
System.out.println("Divide by 0: " + e);
} 
catch(ArrayIndexOutOfBoundsException e) 
{
System.out.println("Array index oob: " + e);
}
System.out.println("After try/catch blocks.");
}
}
















// An example of nested try statements.
class NestTry 
{
public static void main(String args[]) 
{
try 
{
int a = args.length;
/* If no command-line args are present,
the following statement will generate
a divide-by-zero exception. */
int b = 42 / a;
System.out.println("a = " + a);
try 
{ 		// nested try block
/* If one command-line arg is used,
then a divide-by-zero exception
will be generated by the following code. */
if(a==1) a = a/(a-a); 		// division by zero
/* If two command-line args are used,
then generate an out-of-bounds exception. */
if(a==2) 
{
int c[] = { 1 };
c[42] = 99; 
// generate an out-of-bounds exception
}
} 
catch(ArrayIndexOutOfBoundsException e) 
{
      System.out.println("Array index out-of-bounds: " + e);
}
} 
catch(ArithmeticException e) 
{
System.out.println("Divide by 0: " + e);
}
}
}












Use of throw keyword

// Demonstrate throw.
class ThrowDemo 
{
static void demoproc() 
{
try 
{
throw new NullPointerException("demo");
} 
catch(NullPointerException e) 
{
System.out.println("Caught inside demoproc.");
throw e; 			// rethrow the exception
}
}
public static void main(String args[]) 
{
try 
{
demoproc();
} 
catch(NullPointerException e) 
{
System.out.println("Recaught: " + e);
}
}
}
Use of throws keyword

// use of throws.
class ThrowsDemo 
{
static void throwOne() throws IllegalAccessException 
{
System.out.println("Inside throwOne.");
throw new IllegalAccessException("demo");
}
public static void main(String args[]) 
{
try 
{
throwOne();
} 
catch (IllegalAccessException e) 
{
System.out.println("Caught " + e);
}
}
}







Use of finally

// Demonstrate finally.
class FinallyDemo 
{
// Through an exception out of the method.
static void procA() 
{
try 
{
System.out.println("inside procA");
throw new RuntimeException("demo");
} 
finally 
{
System.out.println("procA's finally");
}
}
// Return from within a try block.
static void procB() 
{
try 
{
System.out.println("inside procB");
return;
} 
finally 
{
System.out.println("procB's finally");
}
}
// Execute a try block normally.
static void procC() 
{
try 
{
System.out.println("inside procC");
} 
finally 
{
System.out.println("procC's finally");
}
}
public static void main(String args[]) 
{
try 
{
procA();
} 
catch (Exception e) 
{
System.out.println("Exception caught");
}
procB();
procC();
}
}


































Multithreaded Programming
// Controlling the main Thread.
class CurrentThreadDemo 
{
public static void main(String args[]) 
{
Thread t = Thread.currentThread();
System.out.println("Current thread: " + t);
// change the name of the thread
t.setName("My Thread");
System.out.println("After name change: " + t);
try 
{
for(int n = 5; n > 0; n--) 
{
System.out.println(n);
Thread.sleep(1000);
}
} 
catch (InterruptedException e) 
{
System.out.println("Main thread interrupted");
}
}
}















// Create a second thread.
class NewThread implements Runnable 
{
Thread t;
NewThread() 
{
// Create a new, second thread
t = new Thread(this, "Demo Thread");
System.out.println("Child thread: " + t);
t.start(); 			// Start the thread
}
// This is the entry point for the second thread.
public void run() 
{
try 
{
for(int i = 5; i > 0; i--) 
{
System.out.println("Child Thread: " + i);
Thread.sleep(500);
}
} 
catch (InterruptedException e) 
{
System.out.println("Child interrupted.");
}
System.out.println("Exiting child thread.");
}
}
class ThreadDemo 
{
public static void main(String args[]) 
{
new NewThread(); // create a new thread
try 
{
for(int i = 5; i > 0; i--) 
{
System.out.println("Main Thread: " + i);
Thread.sleep(1000);
}
} 
catch (InterruptedException e) 
{
System.out.println("Main thread interrupted.");
}
System.out.println("Main thread exiting.");
}
}































// Create multiple threads.
class NewThread implements Runnable 
{
String name; 		// name of thread
Thread t;
NewThread(String threadname) 
{
name = threadname;
t = new Thread(this, name);
System.out.println("New thread: " + t);
t.start(); 			// Start the thread
}
// This is the entry point for thread.
public void run() 
{
try 
{
for(int i = 5; i > 0; i--) 
{
System.out.println(name + ": " + i);
Thread.sleep(1000);
}
} 
catch (InterruptedException e) 
{
System.out.println(name + "Interrupted");
}
System.out.println(name + " exiting.");
}
}
class MultiThreadDemo 
{
public static void main(String args[]) 
{
new NewThread("One"); // start threads
new NewThread("Two");
new NewThread("Three");
try 
{
// wait for other threads to end
Thread.sleep(10000);
} 
catch (InterruptedException e) 
{
System.out.println("Main thread Interrupted");
}
System.out.println("Main thread exiting.");
}
}































Using isAlive( ) and join( )
// Using join() to wait for threads to finish.
class NewThread implements Runnable 
{
String name; 		// name of thread
Thread t;
NewThread(String threadname) 
{
name = threadname;
t = new Thread(this, name);
System.out.println("New thread: " + t);
t.start(); // Start the thread
}
// This is the entry point for thread.
public void run() 
{
try 
{
for(int i = 5; i > 0; i--) 
{
System.out.println(name + ": " + i);
Thread.sleep(1000);
}
} 
catch (InterruptedException e) 
{
System.out.println(name + " interrupted.");
}
System.out.println(name + " exiting.");
}
}
class DemoJoin 
{
public static void main(String args[]) 
{
NewThread ob1 = new NewThread("One");
NewThread ob2 = new NewThread("Two");
NewThread ob3 = new NewThread("Three");
System.out.println("Thread One is alive: "+ ob1.t.isAlive());
System.out.println("Thread Two is alive: "+ ob2.t.isAlive());
System.out.println("Thread Three is alive: "+ ob3.t.isAlive());
// wait for threads to finish
try 
{
System.out.println("Waiting for threads to finish.");
ob1.t.join();
ob2.t.join();
ob3.t.join();
} 
catch (InterruptedException e) 
{
System.out.println("Main thread Interrupted");
}
System.out.println("Thread One is alive: "+ ob1.t.isAlive());
System.out.println("Thread Two is alive: "+ ob2.t.isAlive());
System.out.println("Thread Three is alive: "+ ob3.t.isAlive());
System.out.println("Main thread exiting.");
}
}





















Applets

/* This program will compile but not execute like a console program and will not even show any error. */
import java.awt.*;
import java.applet.*;

public class SimpleApplet extends Applet 
{
public void paint(Graphics g) 
{
g.drawString("A Simple Applet", 20, 20);
}
}



/* Add the applet tag to the above program as below and execute it using the appletviewer instead of java.*/

import java.awt.*;
import java.applet.*;

/*
<applet code="SimpleApplet" width=200 height=60>
</applet>
*/
public class SimpleApplet extends Applet 
{
public void paint(Graphics g) 
{
g.drawString("A Simple Applet", 20, 20);
}
}






// An Applet skeleton.
import java.awt.*;
import java.applet.*;

/*
<applet code="AppletSkel" width=300 height=100>
</applet>
*/

public class AppletSkel extends Applet 
{
// Called first.
public void init() 
{
// initialization
}
/* Called second, after init(). Also called whenever
the applet is restarted. */
public void start() 
{
// start or resume execution
}
// Called when the applet is stopped.
public void stop() 
{
// suspends execution
}
/* Called when applet is terminated. This is the last
method executed. */
public void destroy() 
{
// perform shutdown activities
}
// Called when an applet's window must be restored.
public void paint(Graphics g) 
{
// redisplay contents of window
}
}

/* A simple applet that sets the foreground and
background colors and outputs a string. */

import java.awt.*;
import java.applet.*;

/*
<applet code="Sample" width=300 height=50>
</applet>
*/

public class Sample extends Applet
{
String msg;
// set the foreground and background colors.
public void init() 
{
setBackground(Color.cyan);
setForeground(Color.red);
msg = "Inside init( ) --";
}
// Initialize the string to be displayed.
public void start() 
{
msg += " Inside start( ) --";
}
// Display msg in applet window.
public void paint(Graphics g) 
{
msg += " Inside paint( ).";
g.drawString(msg, 10, 30);
}
}







/* A simple banner applet.
This applet creates a thread that scrolls
the message contained in msg right to left
across the applet's window.
*/

import java.awt.*;
import java.applet.*;

/*
<applet code="SimpleBanner" width=300 height=50>
</applet>
*/

public class SimpleBanner extends Applet implements Runnable 
{
String msg = " A Simple Moving Banner.";
Thread t = null;
int state;
boolean stopFlag;
// Set colors and initialize thread.
public void init() 
{
setBackground(Color.cyan);
setForeground(Color.red);
}
// Start thread
public void start() 
{
t = new Thread(this);
stopFlag = false;
t.start();
}
// Entry point for the thread that runs the banner.
public void run() 
{
char ch;
// Display banner
for( ; ; ) 
{
try 
{
repaint();
Thread.sleep(250);
ch = msg.charAt(0);
msg = msg.substring(1, msg.length());
msg += ch;
if(stopFlag)
break;
} 
catch(InterruptedException e) 
{  

}
}
}
// Pause the banner.
public void stop() 
{
stopFlag = true;
t = null;
}
// Display the banner.
public void paint(Graphics g) 
{
g.drawString(msg, 50, 30);
}
}












// Using the Status Window.

import java.awt.*;
import java.applet.*;

/*
<applet code="StatusWindow" width=300 height=50>
</applet>
*/

public class StatusWindow extends Applet
{
public void init() 
{
setBackground(Color.cyan);
}
// Display msg in applet window.
public void paint(Graphics g) 
{
g.drawString("This is in the applet window.", 10, 20);
showStatus("This is shown in the status window.");
}
}

















// Use Parameters

import java.awt.*;
import java.applet.*;

/*
<applet code="ParamDemo" width=300 height=80>
<param name=fontName value=Courier>
<param name=fontSize value=14>
<param name=leading value=2>
<param name=accountEnabled value=true>
</applet>
*/

public class ParamDemo extends Applet
{
String fontName;
int fontSize;
float leading;
boolean active;
// Initialize the string to be displayed.
public void start() 
{
String param;
fontName = getParameter("fontName");
if(fontName == null)
fontName = "Not Found";
param = getParameter("fontSize");
try 
{
if(param != null) 			// if not found
fontSize = Integer.parseInt(param);
else
fontSize = 0;
} 
catch(NumberFormatException e) 
{
fontSize = -1;
}
param = getParameter("leading");
try 
{
if(param != null) 			// if not found
leading = Float.valueOf(param).floatValue();
else
leading = 0;
} 
catch(NumberFormatException e) 
{
leading = -1;
}
param = getParameter("accountEnabled");
if(param != null)
active = Boolean.valueOf(param).booleanValue();
}
// Display parameters.
public void paint(Graphics g) 
{
g.drawString("Font name: " + fontName, 0, 10);
g.drawString("Font size: " + fontSize, 0, 26);
g.drawString("Leading: " + leading, 0, 42);
g.drawString("Account Active: " + active, 0, 58);
}
}
















Event Handling

// Demonstrate the mouse event handlers.
import java.awt.*;
import java.awt.event.*;
import java.applet.*;

/*
<applet code="MouseEvents" width=300 height=100>
</applet>
*/

public class MouseEvents extends Applet
implements MouseListener, MouseMotionListener 
{
String msg = "";
int mouseX = 0, mouseY = 0; 	// coordinates of mouse
public void init() 
{
addMouseListener(this);
addMouseMotionListener(this);
}
// Handle mouse clicked.
public void mouseClicked(MouseEvent me) 
{
// save coordinates
mouseX = 0;
mouseY = 10;
msg = "Mouse clicked.";
repaint();
}
// Handle mouse entered.
public void mouseEntered(MouseEvent me) 
{
// save coordinates
mouseX = 0;
mouseY = 10;
msg = "Mouse entered.";
repaint();
}
// Handle mouse exited.
public void mouseExited(MouseEvent me) 
{
// save coordinates
mouseX = 0;
mouseY = 10;
msg = "Mouse exited.";
repaint();
}
// Handle button pressed.
public void mousePressed(MouseEvent me) 
{
// save coordinates
mouseX = me.getX();
mouseY = me.getY();
msg = "Down";
repaint();
}
// Handle button released.
public void mouseReleased(MouseEvent me) 
{
// save coordinates
mouseX = me.getX();
mouseY = me.getY();
msg = "Up";
repaint();
}
// Handle mouse dragged.
public void mouseDragged(MouseEvent me) 
{
// save coordinates
mouseX = me.getX();
mouseY = me.getY();
msg = "*";
showStatus("Dragging mouse at " + mouseX + ", " + mouseY);
repaint();
}
// Handle mouse moved.
public void mouseMoved(MouseEvent me) 
{
// show status
showStatus("Moving mouse at " + me.getX() + ", " + me.getY());
}
// Display msg in applet window at current X,Y location.
public void paint(Graphics g) 
{
g.drawString(msg, mouseX, mouseY);
}
}
 
// Demonstrate the key event handlers.

import java.awt.*;
import java.awt.event.*;
import java.applet.*;

/*
<applet code="SimpleKey" width=300 height=100>
</applet>
*/

public class SimpleKey extends Applet
implements KeyListener 
{
String msg = "";
int X = 10, Y = 20; 		// output coordinates
public void init() 
{
addKeyListener(this);
requestFocus(); 		// request input focus
}
public void keyPressed(KeyEvent ke) 
{
showStatus("Key Down");
}
public void keyReleased(KeyEvent ke) 
{
showStatus("Key Up");
}
public void keyTyped(KeyEvent ke) 
{
msg += ke.getKeyChar();
repaint();
}
// Display keystrokes.
public void paint(Graphics g) 
{
g.drawString(msg, X, Y); 
}
}
// Demonstrate some virtual key codes.
import java.awt.*;
import java.awt.event.*;
import java.applet.*;

/*
<applet code="KeyEvents" width=300 height=100>
</applet>
*/

public class KeyEvents extends Applet
implements KeyListener 
{
String msg = "";
int X = 10, Y = 20; 		// output coordinates
public void init() 
{
addKeyListener(this);
requestFocus(); 		// request input focus
}
public void keyPressed(KeyEvent ke) 
{
showStatus("Key Down");
int key = ke.getKeyCode();
switch(key) 
{
case KeyEvent.VK_F1:
msg += "<F1>";
break;

case KeyEvent.VK_F2:
msg += "<F2>";
break;

case KeyEvent.VK_F3:
msg += "<F3>";
break;

case KeyEvent.VK_PAGE_DOWN:
msg += "<PgDn>";
break;

case KeyEvent.VK_PAGE_UP:
msg += "<PgUp>";
break;

case KeyEvent.VK_LEFT:
msg += "<Left Arrow>";
break;

case KeyEvent.VK_RIGHT:
msg += "<Right Arrow>";
break;
}
repaint();
}
public void keyReleased(KeyEvent ke) 
{
showStatus("Key Up");
}
public void keyTyped(KeyEvent ke) 
{
msg += ke.getKeyChar();
repaint();
}
// Display keystrokes.
public void paint(Graphics g) 
{
g.drawString(msg, X, Y);
}
}













// Create a child frame window from within an applet.
import java.awt.*;
import java.awt.event.*;
import java.applet.*;

/*
<applet code="AppletFrame" width=300 height=50>
</applet>
*/

// Create a subclass of Frame.
class SampleFrame extends Frame 
{
SampleFrame(String title) 
{
super(title);
// create an object to handle window events
MyWindowAdapter adapter = new MyWindowAdapter(this);
// register it to receive those events
addWindowListener(adapter);
}
public void paint(Graphics g) 
{
g.drawString("This is in frame window", 10, 40);
}
}
class MyWindowAdapter extends WindowAdapter 
{
SampleFrame sampleFrame;
public MyWindowAdapter(SampleFrame sampleFrame) 
{
this.sampleFrame = sampleFrame;
}
public void windowClosing(WindowEvent we) 
{
sampleFrame.setVisible(false);
}
}
// Create frame window.
public class AppletFrame extends Applet 
{
Frame f;
public void init() 
{
f = new SampleFrame("A Frame Window");
f.setSize(250, 250);
f.setVisible(true);
}
public void start() 
{
f.setVisible(true);
}
public void stop() 
{
f.setVisible(false);
}
public void paint(Graphics g) 
{
g.drawString("This is in applet window", 10, 20);
}
}





















// Handle mouse events in both child and applet windows.
import java.awt.*;
import java.awt.event.*;
import java.applet.*;

/*
<applet code="WindowEvents" width=300 height=50>
</applet>
*/

// Create a subclass of Frame.
class SampleFrame extends Frame
implements MouseListener, MouseMotionListener 
{
String msg = "";
int mouseX=10, mouseY=40;
int movX=0, movY=0;
SampleFrame(String title) 
{
super(title);
// register this object to receive its own mouse events
addMouseListener(this);
addMouseMotionListener(this);
// create an object to handle window events
MyWindowAdapter adapter = new MyWindowAdapter(this);
// register it to receive those events
addWindowListener(adapter);
}
// Handle mouse clicked.
public void mouseClicked(MouseEvent me) 
{
}
// Handle mouse entered.
public void mouseEntered(MouseEvent evtObj) 
{
// save coordinates
mouseX = 10;
mouseY = 54;
msg = "Mouse just entered child.";
repaint();
}
// Handle mouse exited.
public void mouseExited(MouseEvent evtObj) 
{
// save coordinates
mouseX = 10;
mouseY = 54;
msg = "Mouse just left child window.";
repaint();
}
// Handle mouse pressed.
public void mousePressed(MouseEvent me) 
{
// save coordinates
mouseX = me.getX();
mouseY = me.getY();
msg = "Down";
repaint();
}
// Handle mouse released.
public void mouseReleased(MouseEvent me) 
{
// save coordinates
mouseX = me.getX();
mouseY = me.getY();
msg = "Up";
repaint();
}
// Handle mouse dragged.
public void mouseDragged(MouseEvent me) 
{
// save coordinates
mouseX = me.getX();
mouseY = me.getY();
movX = me.getX();
movY = me.getY();
msg = "*";
repaint();
}
// Handle mouse moved.
public void mouseMoved(MouseEvent me) 
{
// save coordinates
movX = me.getX();
movY = me.getY();
repaint(0, 0, 100, 60);
}
public void paint(Graphics g) 
{
g.drawString(msg, mouseX, mouseY);
g.drawString("Mouse at " + movX + ", " + movY, 10, 40);
}
}
class MyWindowAdapter extends WindowAdapter 
{
SampleFrame sampleFrame;
public MyWindowAdapter(SampleFrame sampleFrame) 
{
this.sampleFrame = sampleFrame;
}
public void windowClosing(WindowEvent we) 
{
sampleFrame.setVisible(false);
}
}
// Applet window.
public class WindowEvents extends Applet
implements MouseListener, MouseMotionListener 
{
SampleFrame f;
String msg = "";
int mouseX=0, mouseY=10;
int movX=0, movY=0;
// Create a frame window.
public void init() 
{
f = new SampleFrame("Handle Mouse Events");
f.setSize(300, 200);
f.setVisible(true);
// register this object to receive its own mouse events
addMouseListener(this);
addMouseMotionListener(this);
}
// Remove frame window when stopping applet.
public void stop() 
{
f.setVisible(false);
}
// Show frame window when starting applet.
public void start() 
{
f.setVisible(true);
}
// Handle mouse clicked.
public void mouseClicked(MouseEvent me) 
{
}
// Handle mouse entered.
public void mouseEntered(MouseEvent me) 
{
// save coordinates
mouseX = 0;
mouseY = 24;
msg = "Mouse just entered applet window.";
repaint();
}
// Handle mouse exited.
public void mouseExited(MouseEvent me) 
{
// save coordinates
mouseX = 0;
mouseY = 24;
msg = "Mouse just left applet window.";
repaint();
}
// Handle button pressed.
public void mousePressed(MouseEvent me) 
{
// save coordinates
mouseX = me.getX();
mouseY = me.getY();
msg = "Down";
repaint();
}
// Handle button released.
public void mouseReleased(MouseEvent me) 
{
// save coordinates
mouseX = me.getX();
mouseY = me.getY();
msg = "Up";
repaint();
}
// Handle mouse dragged.
public void mouseDragged(MouseEvent me) 
{
// save coordinates
mouseX = me.getX();
mouseY = me.getY();
movX = me.getX();
movY = me.getY();
msg = "*";
repaint();
}
// Handle mouse moved.
public void mouseMoved(MouseEvent me) 
{
// save coordinates
movX = me.getX();
movY = me.getY();
repaint(0, 0, 100, 20);
}
// Display msg in applet window.
public void paint(Graphics g) 
{
g.drawString(msg, mouseX, mouseY);
g.drawString("Mouse at " + movX + ", " + movY, 0, 10);
}
}

// Create an AWT-based application.
import java.awt.*;
import java.awt.event.*;
import java.applet.*;

// Create a frame window.
public class AppWindow extends Frame 
{
String keymsg = "This is a test.";
String mousemsg = "";
int mouseX=30, mouseY=30;
public AppWindow() 
{
addKeyListener(new MyKeyAdapter(this));
addMouseListener(new MyMouseAdapter(this));
addWindowListener(new MyWindowAdapter());
}
public void paint(Graphics g) 
{
g.drawString(keymsg, 10, 40);
g.drawString(mousemsg, mouseX, mouseY);
}
// Create the window.
public static void main(String args[]) 
{
AppWindow appwin = new AppWindow();
appwin.setSize(new Dimension(300, 200));
appwin.setTitle("An AWT-Based Application");
appwin.setVisible(true);
}
}
class MyKeyAdapter extends KeyAdapter 
{
AppWindow appWindow;
public MyKeyAdapter(AppWindow appWindow) 
{
this.appWindow = appWindow;
}
public void keyTyped(KeyEvent ke) 
{
appWindow.keymsg += ke.getKeyChar();
appWindow.repaint();
};
}
class MyMouseAdapter extends MouseAdapter 
{
AppWindow appWindow;
public MyMouseAdapter(AppWindow appWindow) 
{
this.appWindow = appWindow;
}
public void mousePressed(MouseEvent me) 
{
appWindow.mouseX = me.getX();
appWindow.mouseY = me.getY();
appWindow.mousemsg = "Mouse Down at " + appWindow.mouseX +", " + appWindow.mouseY;
appWindow.repaint();
}
}
class MyWindowAdapter extends WindowAdapter 
{
public void windowClosing(WindowEvent we) 
{
System.exit(0);
}
}













// Draw lines
import java.awt.*;
import java.applet.*;

/*
<applet code="Lines" width=300 height=200>
</applet>
*/

public class Lines extends Applet 
{
public void paint(Graphics g) 
{
g.drawLine(0, 0, 100, 100);
g.drawLine(0, 100, 100, 0);
g.drawLine(40, 25, 250, 180);
g.drawLine(75, 90, 400, 400);
g.drawLine(20, 150, 400, 40);
g.drawLine(5, 290, 80, 19);
}
}


// Draw rectangles
import java.awt.*;
import java.applet.*;
/*
<applet code="Rectangles" width=300 height=200>
</applet>
*/
public class Rectangles extends Applet 
{
public void paint(Graphics g) 
{
g.drawRect(10, 10, 60, 50);
g.fillRect(100, 10, 60, 50);
g.drawRoundRect(190, 10, 60, 50, 15, 15);
g.fillRoundRect(70, 90, 140, 100, 30, 40);
}
}
// Draw Ellipses
import java.awt.*;
import java.applet.*;

/*
<applet code="Ellipses" width=300 height=200>
</applet>
*/

public class Ellipses extends Applet 
{
public void paint(Graphics g) 
{
g.drawOval(10, 10, 50, 50);
g.fillOval(100, 10, 75, 50);
g.drawOval(190, 10, 90, 30);
g.fillOval(70, 90, 140, 100);
}
}


// Draw Arcs
import java.awt.*;
import java.applet.*;

/*
<applet code="Arcs" width=300 height=200>
</applet>
*/
public class Arcs extends Applet 
{
public void paint(Graphics g) 
{
g.drawArc(10, 40, 70, 70, 0, 75);
g.fillArc(100, 40, 70, 70, 0, 75);
g.drawArc(10, 100, 70, 80, 0, 175);
g.fillArc(100, 100, 70, 90, 0, 270);
g.drawArc(200, 80, 80, 80, 0, 180);
}
}
// Draw Polygon
import java.awt.*;
import java.applet.*;

/*
<applet code="HourGlass" width=230 height=210>
</applet>
*/
public class HourGlass extends Applet 
{
public void paint(Graphics g) 
{
int xpoints[] = {30, 200, 30, 200, 30};
int ypoints[] = {30, 30, 200, 200, 30};
int num = 5;
g.drawPolygon(xpoints, ypoints, num);
}
}

// Demonstrate XOR mode.
import java.awt.*;
import java.awt.event.*;
import java.applet.*;

/*
<applet code="XOR" width=400 height=200>
</applet>
*/
public class XOR extends Applet 
{
int chsX=100, chsY=100;
public XOR() 
{
addMouseMotionListener(new MouseMotionAdapter() 
{
public void mouseMoved(MouseEvent me) 
{
int x = me.getX();
int y = me.getY();
chsX = x-10;
chsY = y-10;
repaint();
}
});
}
public void paint(Graphics g) 
{
g.drawLine(0, 0, 100, 100);
g.drawLine(0, 100, 100, 0);
g.setColor(Color.blue);
g.drawLine(40, 25, 250, 180);
g.drawLine(75, 90, 400, 400);
g.setColor(Color.green);
g.drawRect(10, 10, 60, 50);
g.fillRect(100, 10, 60, 50);
g.setColor(Color.red);
g.drawRoundRect(190, 10, 60, 50, 15, 15);
g.fillRoundRect(70, 90, 140, 100, 30, 40);
g.setColor(Color.cyan);
g.drawLine(20, 150, 400, 40);
g.drawLine(5, 290, 80, 19);
// xor cross hairs
g.setXORMode(Color.black);
g.drawLine(chsX-10, chsY, chsX+10, chsY);
g.drawLine(chsX, chsY-10, chsX, chsY+10);
g.setPaintMode();
}
}












// Display Fonts
/*
<applet code="ShowFonts" width=550 height=60>
</applet>
*/

import java.applet.*;
import java.awt.*;
public class ShowFonts extends Applet 
{
public void paint(Graphics g) 
{
String msg = "";
String FontList[];
GraphicsEnvironment ge =
GraphicsEnvironment.getLocalGraphicsEnvironment();
FontList = ge.getAvailableFontFamilyNames();
for(int i = 0; i < FontList.length; i++)
msg += FontList[i] + " ";
g.drawString(msg, 4, 16);
}
}


















Using AWT Controls

Using Labels

// Demonstrate Labels
import java.awt.*;
import java.applet.*;
/*
<applet code="LabelDemo" width=300 height=200>
</applet>
*/

public class LabelDemo extends Applet 
{
public void init() 
{
Label one = new Label("One");
Label two = new Label("Two");
Label three = new Label("Three");
// add labels to applet window
add(one);
add(two);
add(three);
}
}


// Demonstrate Buttons
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
/*
<applet code="ButtonDemo" width=250 height=150>
</applet>
*/

public class ButtonDemo extends Applet implements ActionListener 
{
String msg = "";
Button yes, no, maybe;
public void init() 
{
yes = new Button("Yes");
no = new Button("No");
maybe = new Button("Undecided");
add(yes);
add(no);
add(maybe);
yes.addActionListener(this);
no.addActionListener(this);
maybe.addActionListener(this);
}
public void actionPerformed(ActionEvent ae) 
{
String str = ae.getActionCommand();
if(str.equals("Yes")) 
{
msg = "You pressed Yes.";
}
else if(str.equals("No")) 
{
msg = "You pressed No.";
}
else 
{
msg = "You pressed Undecided.";
}
repaint();
}
public void paint(Graphics g) 
{
g.drawString(msg, 6, 100);
}
}






// Recognize Button objects.
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
/*
<applet code="ButtonList" width=250 height=150>
</applet>
*/
public class ButtonList extends Applet implements ActionListener 
{
String msg = "";
Button bList[] = new Button[3];
public void init() 
{
Button yes = new Button("Yes");
Button no = new Button("No");
Button maybe = new Button("Undecided");
// store references to buttons as added
bList[0] = (Button) add(yes);
bList[1] = (Button) add(no);
bList[2] = (Button) add(maybe);
// register to receive action events
for(int i = 0; i < 3; i++) 
{
bList[i].addActionListener(this);
}
}
public void actionPerformed(ActionEvent ae) 
{
for(int i = 0; i < 3; i++) 
{
if(ae.getSource() == bList[i]) 
{
msg = "You pressed " + bList[i].getLabel();
}
}
repaint();
}
public void paint(Graphics g) 
{
g.drawString(msg, 6, 100);
}
}
 
// Demonstrate check boxes.
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
/*
<applet code="CheckboxDemo" width=250 height=200>
</applet>
*/
public class CheckboxDemo extends Applet implements ItemListener 
{
String msg = "";
Checkbox Win98, winNT, solaris, mac;
public void init() 
{
Win98 = new Checkbox("Windows 98/XP", null, true);
winNT = new Checkbox("Windows NT/2000");
solaris = new Checkbox("Solaris");
mac = new Checkbox("MacOS");
add(Win98);
add(winNT);
add(solaris);
add(mac);
Win98.addItemListener(this);
winNT.addItemListener(this);
solaris.addItemListener(this);
mac.addItemListener(this);
}
public void itemStateChanged(ItemEvent ie) 
{
repaint();
}
// Display current state of the check boxes.
public void paint(Graphics g) 
{
msg = "Current state: ";
g.drawString(msg, 6, 80);
msg = " Windows 98/XP: " + Win98.getState();
g.drawString(msg, 6, 100);
msg = " Windows NT/2000: " + winNT.getState();
g.drawString(msg, 6, 120);
msg = " Solaris: " + solaris.getState();
g.drawString(msg, 6, 140);
msg = " MacOS: " + mac.getState();
g.drawString(msg, 6, 160);
}
}
// Demonstrate check box group.
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
/*
<applet code="CBGroup" width=250 height=200>
</applet>
*/
public class CBGroup extends Applet implements ItemListener 
{
String msg = "";
Checkbox Win98, winNT, solaris, mac;
CheckboxGroup cbg;
public void init() 
{
cbg = new CheckboxGroup();
Win98 = new Checkbox("Windows 98/XP", cbg, true);
winNT = new Checkbox("Windows NT/2000", cbg, false);
solaris = new Checkbox("Solaris", cbg, false);
mac = new Checkbox("MacOS", cbg, false);
add(Win98);
add(winNT);
add(solaris);
add(mac);
Win98.addItemListener(this);
winNT.addItemListener(this);
solaris.addItemListener(this);
mac.addItemListener(this);
}
public void itemStateChanged(ItemEvent ie) 
{
repaint();
}
// Display current state of the check boxes.
public void paint(Graphics g) 
{
msg = "Current selection: ";
msg += cbg.getSelectedCheckbox().getLabel();
g.drawString(msg, 6, 100);
}
}






// Demonstrate Choice lists.
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
/*
<applet code="ChoiceDemo" width=300 height=180>
</applet>
*/
public class ChoiceDemo extends Applet implements ItemListener 
{
Choice os, browser;
String msg = "";
public void init() 
{
os = new Choice();
browser = new Choice();
// add items to os list
os.add("Windows 98/XP");
os.add("Windows NT/2000");
os.add("Solaris");
os.add("MacOS");
// add items to browser list
browser.add("Netscape 3.x");
browser.add("Netscape 4.x");
browser.add("Netscape 5.x");
browser.add("Netscape 6.x");
browser.add("Internet Explorer 4.0");
browser.add("Internet Explorer 5.0");
browser.add("Internet Explorer 6.0");
browser.add("Lynx 2.4");
browser.select("Netscape 4.x");
// add choice lists to window
add(os);
add(browser);
// register to receive item events
os.addItemListener(this);
browser.addItemListener(this);
}
public void itemStateChanged(ItemEvent ie) 
{
repaint();
}
// Display current selections.
public void paint(Graphics g) 
{
msg = "Current OS: ";
msg += os.getSelectedItem();
g.drawString(msg, 6, 120);
msg = "Current Browser: ";
msg += browser.getSelectedItem();
g.drawString(msg, 6, 140);
}
}










 
// Demonstrate Lists.
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
/*
<applet code="ListDemo" width=300 height=180>
</applet>
*/

public class ListDemo extends Applet implements ActionListener 
{
List os, browser;
String msg = "";
public void init() 
{
os = new List(4, true);
browser = new List(4, false);
// add items to os list
os.add("Windows 98/XP");
os.add("Windows NT/2000");
os.add("Solaris");
os.add("MacOS");
// add items to browser list
browser.add("Netscape 3.x");
browser.add("Netscape 4.x");
browser.add("Netscape 5.x");
browser.add("Netscape 6.x");
browser.add("Internet Explorer 4.0");
browser.add("Internet Explorer 5.0");
browser.add("Internet Explorer 6.0");
browser.add("Lynx 2.4");
browser.select(1);
// add lists to window
add(os);
add(browser);
// register to receive action events
os.addActionListener(this);
browser.addActionListener(this);
}
public void actionPerformed(ActionEvent ae) 
{
repaint();
}
// Display current selections.
public void paint(Graphics g) 
{
int idx[];
msg = "Current OS: ";
idx = os.getSelectedIndexes();
for(int i=0; i<idx.length; i++)
msg += os.getItem(idx[i]) + " ";
g.drawString(msg, 6, 120);
msg = "Current Browser: ";
msg += browser.getSelectedItem();
g.drawString(msg, 6, 140);
}
}



















public class ButtonDemo extends Applet implements ActionListener 
{
String msg = "";
Button yes, no, maybe;
public void init() 
{
yes = new Button("Yes");
no = new Button("No");
maybe = new Button("Undecided");
add(yes);
add(no);
add(maybe);
yes.addActionListener(this);
no.addActionListener(this);
maybe.addActionListener(this);
}
public void actionPerformed(ActionEvent ae) 
{
String str = ae.getActionCommand();
if(str.equals("Yes")) 
{
msg = "You pressed Yes.";
}
else if(str.equals("No")) 
{
msg = "You pressed No.";
}
else 
{
msg = "You pressed Undecided.";
}
repaint();
}
public void paint(Graphics g) 
{
g.drawString(msg, 6, 100);
}
}







import java.applet.Applet;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;

public class AppletExample extends Applet 
{
	int chsX=100, chsY=100;
	public AppletExample() 
	{
		addMouseMotionListener(new MouseMotionAdapter() 
		{
			public void mouseMoved(MouseEvent me) 
			{
				int x = me.getX();
				int y = me.getY();
				chsX = x-10;
				chsY = y-10;
				repaint();
			}
		});
	}
	public void paint(Graphics g) 
	{
		g.drawLine(0, 0, 100, 100);
		g.drawLine(0, 100, 100, 0);
		g.setColor(Color.blue);
		g.drawLine(40, 25, 250, 180);
		g.drawLine(75, 90, 400, 400);
		g.setColor(Color.green);
		g.drawRect(10, 10, 60, 50);
		g.fillRect(100, 10, 60, 50);
		g.setColor(Color.red);
		g.drawRoundRect(190, 10, 60, 50, 15, 15);
		g.fillRoundRect(70, 90, 140, 100, 30, 40);
		g.setColor(Color.cyan);
		g.drawLine(20, 150, 400, 40);
		g.drawLine(5, 290, 80, 19);
		// xor cross hairs
		g.setXORMode(Color.black);
		g.drawLine(chsX-10, chsY, chsX+10, chsY);
		g.drawLine(chsX, chsY-10, chsX, chsY+10);
		g.setPaintMode();
	}
}






import java.applet.*;
import java.awt.*;

public class AppletExample extends Applet {

   int width, height;
   int N = 25;          // the number of colors created
   Color[] spectrum;    // an array of elements, each of type Color
   Color[] spectrum2;   // another array

   public void init() {
      width = getSize().width;
      height = getSize().height;
      setBackground( Color.black );

      // Allocate the arrays; make them "N" elements long
      spectrum = new Color[ N ];
      spectrum2 = new Color[ N ];

      // Generate the colors and store them in the arrays.
      for ( int i = 1; i <= N; ++i ) {
         // The three numbers passed to the Color() constructor
         // are RGB components in the range [0,1].
         // The casting to (float) is done so that the divisions will be
         // done with floating point numbers, yielding fractional quotients.

         // As i goes from 1 to N, this color goes from almost black to white.
         spectrum[ i-1 ] = new Color( i/(float)N, i/(float)N, i/(float)N );

         // As i goes from 1 to N, this color goes from almost pure green to pure red.
         spectrum2[ i-1 ] = new Color( i/(float)N, (N-i)/(float)N, 0 );
      }
   }

   public void paint( Graphics g ) {

      int step = 90 / N;
      for ( int i = 0; i < N; ++i ) {
         g.setColor( spectrum[ i ] );
         g.fillArc( 0, 0, 2*width, 2*height, 90+i*step, step+1 );

         g.setColor( spectrum2[ i ] );
         g.fillArc( width/3, height/3, 4*width/3, 4*height/3, 90+i*step, step+1 );
      }
   }
}
import java.applet.*;
import java.awt.*;
import java.awt.event.*;

public class AppletExample extends Applet
   implements MouseListener, MouseMotionListener {

   int width, height;
   int mx, my;  // the mouse coordinates
   boolean isButtonPressed = false;

   public void init() {
      width = getSize().width;
      height = getSize().height;
      setBackground( Color.black );

      mx = width/2;
      my = height/2;

      addMouseListener( this );
      addMouseMotionListener( this );
   }

   public void mouseEntered( MouseEvent e ) {
      // called when the pointer enters the applet's rectangular area
   }
   public void mouseExited( MouseEvent e ) {
      // called when the pointer leaves the applet's rectangular area
   }
   public void mouseClicked( MouseEvent e ) {
      // called after a press and release of a mouse button
      // with no motion in between
      // (If the user presses, drags, and then releases, there will be
      // no click event generated.)
   }
   public void mousePressed( MouseEvent e ) {  // called after a button is pressed down
      isButtonPressed = true;
      setBackground( Color.gray );
      repaint();
      // "Consume" the event so it won't be processed in the
      // default manner by the source which generated it.
      e.consume();
   }
   public void mouseReleased( MouseEvent e ) {  // called after a button is released
      isButtonPressed = false;
      setBackground( Color.black );
      repaint();
      e.consume();
   }
   public void mouseMoved( MouseEvent e ) {  // called during motion when no buttons are down
      mx = e.getX();
      my = e.getY();
      showStatus( "Mouse at (" + mx + "," + my + ")" );
      repaint();
      e.consume();
   }
   public void mouseDragged( MouseEvent e ) {  // called during motion with buttons down
      mx = e.getX();
      my = e.getY();
      showStatus( "Mouse at (" + mx + "," + my + ")" );
      repaint();
      e.consume();
   }

   public void paint( Graphics g ) {
      if ( isButtonPressed ) {
         g.setColor( Color.black );
      }
      else {
         g.setColor( Color.gray );
      }
      g.fillRect( mx-20, my-20, 40, 40 );
   }
}

    
    
    
    


https://gofile.io/d/KvgXXr
    
    
    
    


import java.awt.*;
import java.awt.event.*;
public class AppletExample extends Frame implements ActionListener
{   
	// no window closing, you can write extra

	// creating reference variables
	Label lab1;
	TextField tf1, tf2, tf3;
	Button btn;
	// constructor
	public AppletExample( )
	{
		setLayout(new GridLayout(4,2,10,15));

		// 3 rows, 2 columns, 10 Hgap, 15 Vgap

		// filling the gaps with yellow color
		setBackground(Color.yellow);

		// Label is a component like a Button
		lab1= new Label("Enter User Name");

		// creating text fields
		tf1 = new TextField(15);
		tf2 = new TextField(15);
		tf3 = new TextField("I Display",15);  

		btn = new Button("VALIDATE");
		// registering text field with AL
		btn.addActionListener(this);

		// beautification(optional)
		tf2.setEchoChar('*');          // displayed as *
		tf3.setEditable(false);         // user cannot enter anything
		tf3.setBackground(Color.cyan);
		tf3.setForeground(Color.blue);
		tf3.setFont(new Font("Monospaced", Font.BOLD, 25));

		// adding components, order is important
		add(lab1);
		add(tf1);
		// adding anonymous label
		add(new Label("Enter Password"));
		add(tf2);

		add(new Label("CLICK HERE"));
		add(btn);


		add(new Label("Result"));
		add(tf3);

		setTitle("Validating User name and Password ");
		setSize(300,200);
		setVisible(true);
	}

	// override the only abstract method of AL
	public void actionPerformed(ActionEvent e)
	{
		// to read what the user entered
		String s1 = tf1.getText();  
		String s2 = tf2.getText();
		// validation
		if(s1.equalsIgnoreCase("snrao")&&(s2.equalsIgnoreCase("java")))
		{
			// displaying in text field
			tf3.setText("VALID");  
			tf3.setBackground(Color.green);
		}
		else
		{
			tf3.setText("INVALID");
			tf3.setBackground(Color.red);
		}
	}  // close of actionPerformed( )

	public static void main(String[] args)
	{
		new AppletExample();
	}
}





<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>

</head>
<body>
<applet code=AppletExample.class height=3000 width=3000>
<param Name="pname" value="welcome to applet world">

</applet>
</body>
</html>






import java.applet.Applet;
import java.awt.Graphics;

public class AppletExample extends Applet{

	int height,width;
	
	public void init() {
		System.out.println("Init is called");
		height=getSize().height;
		width=getSize().width;
		setName("Myapplet");
	}
	
	public void start() {
		System.out.println("Start is called");
	}
	public void stop() {
		System.out.println("Stop is called");
	}
	
	public void distroy() {
		System.out.println("Distroy is called");
	}
	
	public void paint(Graphics g) {
		System.out.println("paint is called");
		g.drawRoundRect(10, 20, 120, 120, 2, 3);
		g.drawString("simple applet", 20,20);
	}

}







import java.applet.Applet;
import java.awt.Graphics;

public class AppletExample extends Applet{

	public void paint(Graphics g) {
		g.drawString("simple applet", 20,20);
	}

}





------------------------------------

Applet can’t read / write files on user’s file system.
Applet can’t communicate with an internet site other than the one that served the web page that included the applet.
Applet can never run any executable program.
All windows popped by an applet carry a warning message.
Applet can never find any info about the local computer.




Applet is an application designed to be transmitted over the internet & executed by a Java-compatible web browser.
Applets are small applications that are accessed on a Internet server, transported over the Internet, automatically installed & run as part of a web document.






----------------------------------------------

import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.opencsv.CSVReader;

 class Employee {

	private String id;
	private String name;
	private String age;
	private String country;

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getAge() {
		return age;
	}

	public void setAge(String age) {
		this.age = age;
	}

	public String getCountry() {
		return country;
	}

	public void setCountry(String country) {
		this.country = country;
	}

	@Override
	public String toString() {
		return "{" + id + "::" + name + "::" + age + "::" + country + "}";
	}
}

public class OpenCSVReaderLineByLineExample {

	public static void main(String[] args) throws IOException {

		CSVReader reader = new CSVReader(new FileReader("C:\\Users\\Kranti\\Desktop\\JavaExample\\records.csv"), ',');

		List<Employee> emps = new ArrayList<Employee>();

		// read line by line
		String[] record = null;

		while ((record = reader.readNext()) != null) {
			Employee emp = new Employee();
			emp.setId(record[0]);
			emp.setName(record[1]);
			emp.setAge(record[2]);
			emp.setCountry(record[3]);
			emps.add(emp);
		}

		System.out.println(emps);
		
		reader.close();
	}

}






import java.io.FileOutputStream;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class FileExample {
	public static void main(String[] args) {
		
		XSSFWorkbook workbook=new XSSFWorkbook();
		XSSFSheet sheet=workbook.createSheet("JAVA BOOK");
		
		Object[][] bookData= {
				{"JAVA1","ABC",1011},
				{"JAVA1","ABC",1011},
				{"JAVA1","ABC",1011}
		};
		
		int rowCount=0;
		for (Object[] aBook:bookData) {
			XSSFRow row=sheet.createRow(++rowCount);
			int colCount=0;
			for(Object field:aBook) {
				XSSFCell cell=row.createCell(++colCount);
				if(field instanceof String) {
					cell.setCellValue((String)field);
				}
				else if(field instanceof Integer) {
					cell.setCellValue((Integer)field);
				}
			}
			
		}
		
		try {
			FileOutputStream out=new FileOutputStream("javaBook.xlsx");
			workbook.write(out);
		}
		catch (Exception e) {
			System.out.println("Exception");
		}
		
		
	}
}












import java.io.File;

public class FileHandlingExample {
	public static void main(String[] args) {
		File file=new File("myfile.txt");
		try {
			boolean createNewFile=file.createNewFile();
			System.out.println("File created"+createNewFile);
		}
		catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}
}





https://quizizz.com/join?gc=986963
    
    
    

https://gofile.io/d/rkhUhk
    
    
    
    
    


https://gofile.io/d/rPSBtW
    
    
    
import  java.io.*;  
import  org.apache.poi.hssf.usermodel.HSSFSheet;  
import  org.apache.poi.hssf.usermodel.HSSFWorkbook;  
import  org.apache.poi.hssf.usermodel.HSSFRow;  
public class FileExample  
{  
	public static void main(String[]args)   
	{  
		try   
		{  
			//declare file name to be create   
			String filename = "F:\\Demo Data\\Balance.xlsx";  
			//creating an instance of HSSFWorkbook class  
			HSSFWorkbook workbook = new HSSFWorkbook();  
			//invoking creatSheet() method and passing the name of the sheet to be created   
			HSSFSheet sheet = workbook.createSheet("January");   
			//creating the 0th row using the createRow() method  
			HSSFRow rowhead = sheet.createRow((short)0);  
			//creating cell by using the createCell() method and setting the values to the cell by using the setCellValue() method  
			rowhead.createCell(0).setCellValue("S.No.");  
			rowhead.createCell(1).setCellValue("Customer Name");  
			rowhead.createCell(2).setCellValue("Account Number");  
			rowhead.createCell(3).setCellValue("e-mail");  
			rowhead.createCell(4).setCellValue("Balance");  
			//creating the 1st row  
			HSSFRow row = sheet.createRow((short)1);  
			//inserting data in the first row  
			row.createCell(0).setCellValue("1");  
			row.createCell(1).setCellValue("John William");  
			row.createCell(2).setCellValue("9999999");  
			row.createCell(3).setCellValue("william.john@gmail.com");  
			row.createCell(4).setCellValue("700000.00");  
			//creating the 2nd row  
			HSSFRow row1 = sheet.createRow((short)2);  
			//inserting data in the second row  
			row1.createCell(0).setCellValue("2");  
			row1.createCell(1).setCellValue("Mathew Parker");  
			row1.createCell(2).setCellValue("22222222");  
			row1.createCell(3).setCellValue("parker.mathew@gmail.com");  
			row1.createCell(4).setCellValue("200000.00");  
			FileOutputStream fileOut = new FileOutputStream(filename);  
			workbook.write(fileOut);  
			//closing the Stream  
			fileOut.close();  
			//closing the workbook  
			workbook.close();  
			//prints the message on the console  
			System.out.println("Excel file has been generated successfully.");  
		}   
		catch (Exception e)   
		{  
			e.printStackTrace();  
		}  
	}  
}      
    
    
    
    
    
    


https://jar-download.com/download-handling.php
    
    
    
    


public static void writeContent() throws IOException{
		String str="Hello File Handling";

		FileWriter fw=new FileWriter("test");
		for(int i =0;i<str.length();i++) {
			fw.write(str.charAt(i));
		}

		System.out.println("Successful");
		fw.close();
	}

	public static void readContent() throws IOException {
		int ch;
		
		FileReader fr=null;
		try {
			fr=new FileReader("test");
			
		}
		catch(Exception e) {
			System.out.println(e.getMessage());
		}
		
		while((ch=fr.read())!=-1) {
			System.out.println((char)ch);
		}
		fr.close();

	}

	public static void main(String[] args) throws IOException {
		
		FileExample.writeContent();
		FileExample.readContent();
			
	}


    
    
    
    


	public static void main(String[] args) throws IOException {
		String str="Hello File Handling";
		
		FileWriter fw=new FileWriter("test");
		for(int i =0;i<str.length();i++) {
			fw.write(str.charAt(i));
		}
		
		System.out.println("Successful");
		fw.close();
		
	}
	
    
    


public class FileExample {

	public static void main(String[] args) {
		try {

			byte bwrite[]= {10,20,30,40,50};
			OutputStream os=new FileOutputStream("output.txt");
			for(int i=0;i<bwrite.length;i++) {
				os.write(bwrite[i]);
			}
			os.close();


			InputStream in=new FileInputStream("output.txt");
			int size=in.available();
			System.out.println("Size "+size);
			for(int i=0;i<size;i++) {
				System.out.println((char)in.read());
			}
			in.close();


		}
		catch(Exception e) {
			System.out.println(e.getMessage());
		}

	}


    }d
    
    

public class FileExample {
	
	
	public static void main(String[] args) throws IOException {
		InputStreamReader cin=null;
		try {
			cin=new InputStreamReader(System.in);
			System.out.println("Enter characters");
			char c;
			do {
				c=(char)cin.read();
				System.out.println(c);
				
			}while(c!='q');
			
			
		}
		catch(Exception e) {
			System.out.println(e.getMessage());
		}
		finally {
			cin.close();
		}
	}
	
    }



InputStream – This depicts the flow of bytes from data source to the programs memory.
OutputStream – This depicts the flow of bytes from  the programs memory to the destination data store.
Java views these streams in terms of objects that will perform different operations on the streams through their method calls.
Two basic operations  involved are 
Read from input stream
Write to output stream






EXAMPLE 1

// The Clock class demonstrates animation with threads
import java.awt.*; 
import java.applet.*; 
import java.util.*;

public class ThreadingSwing extends Applet implements Runnable
{
	Font f = new Font("TimesRoman",Font.BOLD,24);
	Date d;
	Thread runner;
	public void init() 
	{
		resize(300,100);
	}

	public void paint(Graphics g)
	{
		g.setFont(f);g.drawString(d.toString(),10,50);
	}

	public void start()
	{
		while(runner==null)
		{
			runner=new Thread(this);
			runner.start();
		}
	}

	public void run()
	{
		while (true)
		{
			d = new Date(); repaint();
			try {Thread.sleep(1000);}
			catch(InterruptedException e){};
		}
	}
}




EXAMPLE 2
import java.awt.*; import java.awt.event.*; import javax.swing.*;
public class ThreadingSwing extends JFrame implements ActionListener
{
  JLabel answer=new JLabel("");
  JPanel pane=new JPanel(); // create pane object
  JButton pressme=new JButton("Press Me");
  ThreadingSwing()   // the constructor
  {
    super("Event Handler Demo"); setBounds(100,100,300,200);
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    Container con=this.getContentPane(); // inherit main frame
    con.add(pane); pressme.setMnemonic('P'); // associate hotkey
    pressme.addActionListener(this); // register button listener
    pane.add(answer); pane.add(pressme); pressme.requestFocus();
    setVisible(true); // make frame visible
  }
  // here is the basic event handler
  public void actionPerformed(ActionEvent event)
  {
    Object source=event.getSource();
    if (source==pressme)
    {
      answer.setText("Button pressed!");
      JOptionPane.showMessageDialog(null,"I hear you!",
        "Message Dialog",JOptionPane.PLAIN_MESSAGE);
      setVisible(true);  // show something
    }
  }
  public static void main(String args[]) {new ThreadingSwing();}
}




Varies








threads are multiple flows of control within a single program or
process.

/**
* Threaded demo application, as a Threads subclass.
*/
public class ThreadsDemo1 extends Thread {
String mesg;
int count;
/** Run does the work: print a message, "count" number of times */
public void run( ) {
while (count-- > 0) {
println(mesg);
try {
Thread.sleep(100); // 100 msec
} catch (InterruptedException e) {
return;
}
}
println(mesg + " all done.");
}
void println(String s) {
System.out.println(s);
}
/**
* Construct a ThreadsDemo1 object.
* @param String m Message to display
* @param int n How many times to display it
*/
public ThreadsDemo1(String m, int n) {
count = n;
mesg = m;
setName(m + " runner Thread");
}
/**
* Main program, test driver for ThreadsDemo1 class.
*/
public static void main(String[] argv) {
// could say: new ThreadsDemo1("Hello from X", 10).run( );
// could say: new ThreadsDemo1("Hello from Y", 15).run( );
// But then it wouldn't be multi-threaded!
new ThreadsDemo1("Hello from X", 10).start( );
new ThreadsDemo1("Hello from Y", 15).start( );
}
}






public class SynchronizedAccountTesting implements Runnable {
	private Account acct = new Account();
	public static void main(String[] args) {
		SynchronizedAccountTesting r = new SynchronizedAccountTesting();
		Thread one = new Thread(r);
		Thread two = new Thread(r);
		one.setName("Ranjeet");
		two.setName("Reema");
		one.start();
		two.start();
	}
	@Override
	public void run() {
		for (int x = 0; x < 5; x++) {
			makeWithdrawal(10);
			if (acct.getBalance() < 0) {
				System.out.println("account is overdrawn!");
			}
		}
	}
	private synchronized void makeWithdrawal(int amt) {
		if (acct.getBalance() >= amt) {
			System.out.println(Thread.currentThread().getName() + " is going to withdraw");
			try {
				Thread.sleep(100);
			} catch (InterruptedException ex) {
			}
			acct.withdraw(amt);
			System.out.println(Thread.currentThread().getName() + " completes the withdrawal");
		} else {
			System.out.println("Not enough in account for " + Thread.currentThread().getName() + " to withdraw " + acct.getBalance());
		}
	}
}
class Account {
	private int balance = 50;
	public int getBalance() {
	return balance;
	}
	public void withdraw(int amount) {
	balance = balance - amount;
	}
}




/*                     Priorities to Threads

    Threads can be given different priorities from 1 to 10. The thread with more priority is given first preference  by the thread scheduler to allocate microprocessor time, than the thread with less priority.

   There are two methods that support priorities in Thread class.

          1.  with setPriority(int) method, we can set a priority to a thread.

          2. with getPriority() we can retrieve the priority of a thread.

          To give priorities, the Thread class defines three constant variables(called symbolic constants) as follows:

     public static final int MIN_PRIORITY = 1;
     public static final int NORM_PRIORITY = 5;
     public static final int MAX_PRIORITY = 10;

           If we do not set a priority for a thread, JVM gives a default priority of 5 (called normal priority).

      The following program explains how to use above methods and constants.

*/

// Aim: to give priorities to  threads and to observe that the thread with more priority executes earlier than the thread with less priority.

public class PriorityDemo extends Thread
{
      public void run( )
      {
        for(int i = 0; i < 10; i++)
        {
              System.out.println(this.getName( ) + ": " + i);
       }        
     }

     public static void main(String args[])
     {
        PriorityDemo pd1 = new PriorityDemo();
        PriorityDemo pd2 = new PriorityDemo( );     

                                         // setting priorities       
       pd1.setPriority(Thread.MAX_PRIORITY-2); // 8
        pd2.setPriority(Thread.MIN_PRIORITY+2); // 3

                                // setting the names
pd1.setName("More");     // for 8  thread 
pd2.setName("Less");       // for 3 thread   

                         // to retrieve the priorities
System.out.println("More Priority is " +pd1.getPriority());                                                                               // prints 8

System.out.println("Less Priority is " + pd2.getPriority());                                                                                    // prints 3

pd2.start(); // wantedly pd2 is started first
pd1.start();    
   }
}               // you can use join() method also


/*
         The above for loop can replaced as follows:

 for(int i = 0; i < 10; i++)
{
           Thread t = Thread.currentThread();
            String name = t.getName();
            System.out.println(name + ": " + i);
 }

*/







class Counter implements Runnable{

	Thread myThread;
	
	Counter(){
		
		myThread=new Thread(this,"My running thread");
		System.out.println("My THread is created"+myThread);
		myThread.start();
	}
	
	public void run()  {
		for (int i = 0; i < 10; i++) {
			System.out.println("Counter"+i);
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		System.out.println("Thread is over");
	}
}

public class MultithreadingExample {
	public static void main(String[] args) {
		Counter c1=new Counter();
		
		try {
			
			while(c1.myThread.isAlive()) {
				System.out.println("Main Thread will be alive till the child thread is live");
				Thread.sleep(1000);
			}
			
		}
		catch(Exception e) {
			System.out.println(e.getMessage());
		}
		
		System.out.println("Main thread is over now");
	}
}






package com.training.org;
import java.util.Iterator;
class Counter extends Thread{

	Thread myThread;
	
	Counter(){
		super("Super thread");
		myThread=new Thread(this,"My running thread");
		System.out.println("My THread is created");
		start();
	}
	
	public void run()  {
		for (int i = 0; i < 10; i++) {
			System.out.println("Counter"+i);
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		System.out.println("Thread is over");
	}
}

public class MultithreadingExample {
	public static void main(String[] args) {
		Counter c1=new Counter();
		
		try {
			
			while(c1.myThread.isAlive()) {
				System.out.println("Main Thread will be alive till the child thread is live");
				Thread.sleep(1000);
			}
			
		}
		catch(Exception e) {
			System.out.println(e.getMessage());
		}
		
		System.out.println("Main thread is over now");
	}
}





package com.training.org;
import java.util.Iterator;
class Counter extends Thread{

	Counter(){
		super("Super thread");
		System.out.println("My THread is created");
		start();
	}
	
	public void run()  {
		for (int i = 0; i < 10; i++) {
			System.out.println("Counter"+i);
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		System.out.println("Thread is over");
	}
}

public class MultithreadingExample {
	public static void main(String[] args) {
		Counter c1=new Counter();
		
		try {
			
			while(c1.isAlive()) {
				System.out.println("Main Thread will be alive till the child thread is live");
				Thread.sleep(1000);
			}
			
		}
		catch(Exception e) {
			System.out.println(e.getMessage());
		}
		
		System.out.println("Main thread is over now");
	}
}






package com.training.org;
import java.util.Iterator;

class MyClass implements Runnable{

	Thread t1;
	private String name;
	MyClass(String name){
		this.name=name;
	}
	
	@Override
	public void run() {
		System.out.println("Current Thread "+Thread.currentThread().getId());
		for(int i=0;i<4;i++) {
			System.out.println(i);
			System.out.println(name);
			try {
				Thread.sleep(1000);
			}
			catch (Exception e) {
				System.out.println(e.getMessage());
			}
		}
		
	}

	public void start() {
		System.out.println("Start is called");
		t1=new Thread(this,name);
		
	}
	
}


public class MultithreadingExample {
	public static void main(String[] args) {
		MyClass m1=new MyClass("Eshan");
		m1.start();
		
		Thread t1=new Thread(m1);
		t1.start();
			
	}
}

---------------------------------------------------

class MyClass implements Runnable{

	Thread t1;
	private String name;
	MyClass(String name){
		this.name=name;
	}
	
	@Override
	public void run() {
		System.out.println("Current Thread "+Thread.currentThread().getId());
		for(int i=0;i<4;i++) {
			System.out.println(i);
			System.out.println(name);
			try {
				Thread.sleep(1000);
			}
			catch (Exception e) {
				System.out.println(e.getMessage());
			}
		}
		
	}

	public void start() {
		System.out.println("Start is called");
		t1=new Thread(this,name);
		
	}
	
}






package com.training.org;
import java.util.Iterator;
class Multithreading extends Thread{
	private static Object obj=new Object();
	public void run() {
		try {
			System.out.println("Before Sleep");
			Thread.sleep(2000);
			System.out.println("Thread"+Thread.currentThread()+" ID"+Thread.currentThread().getId());
			synchronized (obj) {
				obj.wait();
				System.out.println("After wait");
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}


public class MultithreadingExample {
	public static void main(String[] args) {
		
		//for (int i = 0; i < 10; i++) {
			Multithreading m1=new Multithreading();
			m1.start();
			
	//	}
	}
}







Methods of Thread class
run() - must be overridden; code should be added which executes in thread.
start() - brings the thread into ready to run condition. When CPU is available for this thread, invokes the run().
stop() - Forces the thread to stop executing. It’s a final method. (Deprecated)
sleep() - A static method, puts currently executing thread to sleep for specified no. of milliseconds. 





https://gofile.io/d/zRYhjN
    
    
    
    
    


package com.training.org;

import java.util.Iterator;

class Multithreading extends Thread{

	public void run() {

		try {
			System.out.println("Thread"+Thread.currentThread()+" ID"+Thread.currentThread().getId());
		} catch (Exception e) {

			e.printStackTrace();
		}
	}


}


public class MultithreadingExample {
	public static void main(String[] args) {

		for (int i = 0; i < 10; i++) {


			Multithreading m1=new Multithreading();
			m1.start();
		}
	}
}










Multithreading is a system in which many threads are created from a process through which the computer power is increased. In multithreading, CPU is provided in order to execute many threads from a process at a time, and in multithreading, process creation is performed according to cost. Unlike multitasking, multithreading provides the same memory and resources to the processes for execution.




Multitasking is when a CPU is provided to execute multiple tasks at a time. Multitasking involves often CPU switching between the tasks, so that users can collaborate with each program together. Unlike multithreading, In multitasking, the processes share separate memory and resources. As multitasking involves CPU switching between the tasks rapidly, So the little time is needed in order to switch from the one user to next.

